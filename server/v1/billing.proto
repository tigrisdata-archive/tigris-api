// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.billing.v1;

import "google/api/annotations.proto";
import "openapiv3/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";

message ListInvoicesRequest{
  //RFC 3339 timestamp (inclusive). Invoices will only be returned for billing periods that start at or after this time.
  optional google.protobuf.Timestamp starting_on = 1;
  //RFC 3339 timestamp (exclusive). Invoices will only be returned for billing periods that end before this time.
  optional google.protobuf.Timestamp ending_before = 2;
  // optionally filter by a specific invoice_id
  string invoice_id = 3;
  // maximum number of items to include in result set
  optional int32 page_size = 4;
  // pagination token for fetching a particular result page, first page will be fetched if `null`
  optional string next_page = 5;
}

message ListInvoicesResponse {
  // Array of invoices
  repeated Invoice data = 1;
  // token for next page if it exists, else `null`
  optional string next_page = 2;
}

message Invoice {
  // unique identifier for this invoice
  string id = 1;
  // entries that make up the invoice
  repeated InvoiceLineItem entries = 2;
  // RFC 3339 starting time for usage period during which items were added to this invoice
  google.protobuf.Timestamp start_time = 3;
  // RFC 3339 ending time for usage period during which items were added to this invoice
  google.protobuf.Timestamp end_time = 4;
  // invoice subtotal
  float subtotal = 5;
  // total invoice amount
  float total = 6;
  // Tigris price plan name
  string plan_name = 7;
}

message InvoiceLineItem {
  // Product name
  string name = 1;
  // Quantity
  float quantity = 2;
  // Total amount for the product
  float total = 3;
  // Broken down charges
  repeated Charge charges = 4;
}

message Charge {
  // Charge name
  string name = 1;
  float quantity = 2;
  float subtotal = 3;
  // Tiered charges, if any
  repeated ChargeTier tiers = 4;
}

message ChargeTier {
  // Starting point where this Tier is applicable.
  // Ex - A charge could be tiered as "Tier 1 (0-5)", "Tier 2 (5-10)"; starting_at will be 0, 5 etc.
  float starting_at = 1;
  float quantity = 2;
  float price = 3;
  float subtotal = 4;
}

message UsageRequest {
  // RFC 3339 starting time to get usage from
  google.protobuf.Timestamp start_time = 1;
  // RFC 3339 ending time to get usage until
  google.protobuf.Timestamp end_time = 2;
  // Optionally filter usage data by specific metrics. By default, all metrics are included in usage data
  repeated string metrics = 3;
  // Optionally aggregate data over a time window. By default, data will be aggregated "hourly"
  optional AggregationWindow aggregate_by = 4;
  // Optional pagination token for fetching a particular result page, first page will be fetched if `null`
  optional string next_page = 5;
}

enum AggregationWindow {
  HOUR = 0;
  DAY = 1;
}

message UsageResponse {
  // Series of usage data grouped by usage metric.
  map<string, UsageTimeSeries> data = 1;
  // token for next page if it exists, else `null`
  optional string next_page = 2;
}

message Usage {
  // RFC 3339 starting time for this usage period
  google.protobuf.Timestamp start_time = 1;
  // RFC 3339 ending time for this usage period
  google.protobuf.Timestamp end_time = 2;
  // Usage metric value
  float value = 3;
}

message UsageTimeSeries {
  // Array of usage metric
  repeated Usage series = 1;
}

service Billing {

  // ListInvoices fetches past invoices for this user
  rpc ListInvoices(ListInvoicesRequest) returns (ListInvoicesResponse) {
    option (google.api.http) = {
      get: "/v1/billing/invoices"
      additional_bindings {
        get: "/v1/billing/invoices/{invoice_id}"
      }
    };
    option(openapi.v3.operation) = {
      summary: "Lists all invoices for the user",
      tags: "Billing"
    };
  }

  // GetUsage gets the aggregate usage for this user in given time period
  rpc GetUsage(UsageRequest) returns (UsageResponse) {
    option (google.api.http) = {
      post: "/v1/billing/usage",
      body: "*"
    };
    option(openapi.v3.operation) = {
      summary: "Get billed usage for the user over a time period",
      tags: "Billing"
    };
  }
}