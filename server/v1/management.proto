// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.management.v1;

import "google/api/annotations.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";

message CreateNamespaceRequest {
  // The unique id
  int32 id = 1;
  // The display name for namespace.
  string display_name = 2;
}

message CreateNamespaceResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "created".
  string status = 2;
  // The created namespace
  NamespaceInfo namespace = 3;
}

message NamespaceInfo{
  // The unique namespace id.
  int32 id = 1;
  // The namespace name.
  string name = 2;
  // The namespace display name.
  string display_name = 3;
}

message ListNamespacesRequest {
}

message ListNamespacesResponse {
  repeated NamespaceInfo namespaces = 1;
}


// Request creation of user application
message CreateApplicationRequest {
  // A human readable app name
  string name = 1;
  // A human readable app description
  string description = 2;
}

// CreateApplication returns created application
message CreateApplicationResponse {
  // created app object
  Application created_application = 1;
}

// Request creation of user application
message UpdateApplicationRequest {
  // application id
  string id = 1;
  // A new human readable app name
  string name = 2;
  // A new human readable app description
  string description = 3;
}

// CreateApplication returns created application
message UpdateApplicationResponse {
  // updated application object
  Application updated_application = 1;
}

// An user application
message Application {
  // Generated client id
  string id = 1;
  // A human readable app name
  string name = 2;
  // A human readable app description
  string description = 3;
  // Generated app secret
  string secret = 4;
  // Created at
  int64 created_at = 5;
  // Created by
  string created_by = 6;
  // Updated at
  int64 updated_at = 7;
  // Updated by
  string updated_by = 8;
}

// Request listing of all the application those are visible to requesting actor
message ListApplicationsRequest {
}

// ListApplication returns one or more visible application to user
message ListApplicationsResponse {
  repeated Application applications = 1;
}

// Request deletion of an application
message DeleteApplicationsRequest {
  // application id
  string id = 1;
}

// DeleteApplication returns the flag to convey if application was deleted
message DeleteApplicationResponse {
  // status flag for delete operation
  bool deleted = 1;
}

// Request rotation of an application secret
message RotateApplicationSecretRequest {
  // application id
  string id = 1;
}

// RotateApplicationRequest returns the new application with rotated secret
message RotateApplicationSecretResponse{
  // A new Application with rotated secret.
  Application application = 1;
}

// Request user metadata
message GetUserMetadataRequest {
  string metadataKey = 1;
}

// User metadata response
message GetUserMetadataResponse {
  string metadataKey = 1;
  string userId = 2;
  uint32 namespaceId = 3;
  bytes value = 4;
}

// Request insertion of user metadata
message InsertUserMetadataRequest {
  string metadataKey = 1;
  bytes value = 2;
}

// Insertion of user metadata response
message InsertUserMetadataResponse {
  string metadataKey = 1;
  string userId = 2;
  uint32 namespaceId = 3;
  bytes value = 4;
}

// Request update of user metadata
message UpdateUserMetadataRequest {
  string metadataKey = 1;
  bytes value = 2;
}

// Update of user metadata response
message UpdateUserMetadataResponse {
  string metadataKey = 1;
  string userId = 2;
  uint32 namespaceId = 3;
  bytes value = 4;
}

service Management {
  // Creates a new namespace, if it does not exist
  rpc CreateNamespace(CreateNamespaceRequest) returns
      (CreateNamespaceResponse) {
    option (google.api.http) = {
      post : "/v1/management/namespaces/{display_name}/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Creates a Namespace"
      tags: "Namespaces"
    };
  }

  // List all namespace
  rpc ListNamespaces(ListNamespacesRequest) returns
      (ListNamespacesResponse) {
    option (google.api.http) = {
      post : "/v1/management/namespaces/list"
    };
    option(openapi.v3.operation) = {
      summary: "Lists all Namespaces"
      tags: "Namespaces"
    };
  }


  // Create an application.
  rpc CreateApplication(CreateApplicationRequest) returns
      (CreateApplicationResponse) {
    option (google.api.http) = {
      post : "/v1/management/applications/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Creates the Application"
      tags: "Management"
    };
  }

  // Update an application.
  rpc UpdateApplication(UpdateApplicationRequest) returns
      (UpdateApplicationResponse) {
    option (google.api.http) = {
      post : "/v1/management/applications/update"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Updates the Application"
      tags: "Management"
    };
  }

  // Delete an application.
  rpc DeleteApplication(DeleteApplicationsRequest) returns
      (DeleteApplicationResponse) {
    option (google.api.http) = {
      delete : "/v1/management/applications/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Deletes the Application"
      tags: "Management"
    };
  }

  // Lists all application visible to requesting actor.
  rpc ListApplications(ListApplicationsRequest) returns
      (ListApplicationsResponse) {
    option (google.api.http) = {
      post : "/v1/management/applications/list"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "List Applications"
      tags: "Management"
    };
  }

  // Endpoint is used to rotate the secret for the application.
  rpc RotateApplicationSecret(RotateApplicationSecretRequest) returns
      (RotateApplicationSecretResponse) {
    option (google.api.http) = {
      post : "/v1/management/applications/rotate"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Rotates the Application Secret"
      tags: "Management"
    };
  }

  // insertUserMetadata inserts the user metadata object
  rpc InsertUserMetadata(InsertUserMetadataRequest) returns
      (InsertUserMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/users/metadata/{metadataKey}/insert"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Inserts User Metadata"
      tags: "Management"
    };
  }

  // insertUserMetadata inserts the user metadata object
  rpc GetUserMetadata(GetUserMetadataRequest) returns
      (GetUserMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/users/metadata/{metadataKey}/get"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Reads the User Metadata"
      tags: "Management"
    };
  }

  // updateUserMetadata updates the user metadata object
  rpc UpdateUserMetadata(UpdateUserMetadataRequest) returns
      (UpdateUserMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/users/metadata/{metadataKey}/update"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Updates User Metadata"
      tags: "Management"
    };
  }
}
