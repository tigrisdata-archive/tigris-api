// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.management.v1;

import "google/api/annotations.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";

message CreateNamespaceRequest {
  // Optional: unique id
  uint32 code = 1;
  // Optional: unique string id
  string id = 2;
  // Required: The display name for namespace.
  string name = 3;
}

message CreateNamespaceResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "created".
  string status = 2;
  // The created namespace
  NamespaceInfo namespace = 3;
}

message NamespaceInfo {
  // The unique namespace code.
  int32 code = 1;
  // The namespace unique id.
  string id = 2;
  // The namespace display name.
  string name = 3;
}

message DescribeNamespacesData {
  string details = 1;
}

message ListNamespacesRequest {
  // Optionally specify if the description of each namespace is requested
  optional bool describe = 1;
  // Optionally filter by specific namespaceId
  string namespace_id = 2;
}

message ListNamespacesResponse {
  repeated NamespaceInfo namespaces = 1;
  optional DescribeNamespacesData data = 2;

}

message DeleteNamespaceRequest {
  // string namespace id to delete.
  string namespace_id = 1;
}

message DeleteNamespaceResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "deleted".
  string status = 2;
}

// Request user metadata
message GetUserMetadataRequest {
  string metadataKey = 1;
}

// User metadata response
message GetUserMetadataResponse {
  string metadataKey = 1;
  string userId = 2;
  uint32 namespaceId = 3;
  bytes value = 4;
}

// Request insertion of user metadata
message InsertUserMetadataRequest {
  string metadataKey = 1;
  bytes value = 2;
}

// Insertion of user metadata response
message InsertUserMetadataResponse {
  string metadataKey = 1;
  string userId = 2;
  uint32 namespaceId = 3;
  bytes value = 4;
}

// Request update of user metadata
message UpdateUserMetadataRequest {
  string metadataKey = 1;
  bytes value = 2;
}

// Update of user metadata response
message UpdateUserMetadataResponse {
  string metadataKey = 1;
  string userId = 2;
  uint32 namespaceId = 3;
  bytes value = 4;
}


// Request namespace metadata
message GetNamespaceMetadataRequest {
  string metadataKey = 1;
}

// Namespace metadata response
message GetNamespaceMetadataResponse {
  string metadataKey = 1;
  uint32 namespaceId = 2;
  bytes value = 3;
}

// Request insertion of namespace metadata
message InsertNamespaceMetadataRequest {
  string metadataKey = 1;
  bytes value = 2;
}

// Insertion of namespace metadata response
message InsertNamespaceMetadataResponse {
  string metadataKey = 1;
  uint32 namespaceId = 2;
  bytes value = 3;
}

// Request update of namespace metadata
message UpdateNamespaceMetadataRequest {
  string metadataKey = 1;
  bytes value = 2;
}

// Update of namespace metadata response
message UpdateNamespaceMetadataResponse {
  string metadataKey = 1;
  uint32 namespaceId = 2;
  bytes value = 3;
}

service Management {
  // Creates a new namespace, if it does not exist
  rpc CreateNamespace(CreateNamespaceRequest) returns
      (CreateNamespaceResponse) {
    option (google.api.http) = {
      post : "/v1/management/namespaces/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Creates a Namespace"
      tags: "Management"
    };
  }

  // List all namespace and optionally lists specific namespace by namespaceId filter, also supports `describe` request.
  rpc ListNamespaces(ListNamespacesRequest) returns
      (ListNamespacesResponse) {
    option (google.api.http) = {
      get : "/v1/management/namespaces/{namespace_id}"
      additional_bindings {
        get : "/v1/management/namespaces"
      }
    };

    option(openapi.v3.operation) = {
      summary: "Lists all Namespaces"
      tags: "Management"
    };
  }

  // DeleteNamespace deletes the namespace and all the data inside it
  rpc DeleteNamespace(DeleteNamespaceRequest) returns
      (DeleteNamespaceResponse) {
    option (google.api.http) = {
      delete : "/v1/management/namespaces/{namespace_id}"
    };
    option(openapi.v3.operation) = {
      summary: "Deletes the namespace"
      tags: "Management"
    };
  }

  // insertUserMetadata inserts the user metadata object
  rpc InsertUserMetadata(InsertUserMetadataRequest) returns
      (InsertUserMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/users/metadata/{metadataKey}/insert"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Inserts User Metadata"
      tags: "Management"
    };
  }

  // GetUserMetadata inserts the user metadata object
  rpc GetUserMetadata(GetUserMetadataRequest) returns
      (GetUserMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/users/metadata/{metadataKey}/get"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Reads the User Metadata"
      tags: "Management"
    };
  }

  // updateUserMetadata updates the user metadata object
  rpc UpdateUserMetadata(UpdateUserMetadataRequest) returns
      (UpdateUserMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/users/metadata/{metadataKey}/update"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Updates User Metadata"
      tags: "Management"
    };
  }

  // InsertNamespaceMetadata inserts the namespace metadata object
  rpc InsertNamespaceMetadata(InsertNamespaceMetadataRequest) returns
      (InsertNamespaceMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/namespace/metadata/{metadataKey}/insert"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Inserts Namespace Metadata"
      tags: "Management"
    };
  }

  // GetNamespaceMetadata inserts the user metadata object
  rpc GetNamespaceMetadata(GetNamespaceMetadataRequest) returns
      (GetNamespaceMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/namespace/metadata/{metadataKey}/get"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Reads the Namespace Metadata"
      tags: "Management"
    };
  }

  // UpdateNamespaceMetadata updates the user metadata object
  rpc UpdateNamespaceMetadata(UpdateNamespaceMetadataRequest) returns
      (UpdateNamespaceMetadataResponse) {
    option (google.api.http) = {
      post : "/v1/management/namespace/metadata/{metadataKey}/update"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Updates Namespace Metadata"
      tags: "Management"
    };
  }
}
