// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.observability.v1;

import "google/api/annotations.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";


option (openapi.v3.document) = {
  info: {
    title: "Observability API Reference"
    version: "0.0.1"
    description: "\n## Overview\nThis section is organized around Tigris observability HTTP APIs. The APIs accepts JSON requests and returns JSON-encoded responses. The APIs conforms to standard HTTP status codes."
    license: {
      name: "Apache License"
      url: "https://github.com/tigrisdata/tigris/blob/main/LICENSE"
    }
  }
  tags: [{
    name: "metrics"
    description: "Tigris supports pluggable observability providers. The metrics section of API provides way to query Tigris metrics"
  }]
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
            }
          }
        }
      ]
    }
  }
};

message QueryTimeSeriesMetricsRequest {
  string db = 1;
  string collection = 2;
  int64 from = 3;
  int64 to = 4;
  string metric_name = 5;
  MetricQuerySpaceAggregation space_aggregation = 6;
  repeated string space_aggregated_by = 7;
  MetricQueryFunction function = 8;
  float quantile = 9;
  repeated AdditionalFunction additionalFunctions = 10;
}

enum MetricQueryFunction {
  RATE = 0;
  COUNT = 1;
  NONE = 2;
}

// Additional function to apply on metrics query
message AdditionalFunction {
  optional RollupFunction rollup = 1;
}

// Rollup function aggregates the slices of metrics returned by original query
// and lets you operate on the slices using aggregator and constructs the
// bigger slice of your choice of interval (specified in seconds).
message RollupFunction {
  RollupAggregator aggregator = 1;
  int64 interval = 2;
}

enum RollupAggregator {
  ROLLUP_AGGREGATOR_SUM = 0;
  ROLLUP_AGGREGATOR_COUNT = 1;
  ROLLUP_AGGREGATOR_MIN = 2;
  ROLLUP_AGGREGATOR_MAX = 3;
  ROLLUP_AGGREGATOR_AVG = 4;
}


enum MetricQuerySpaceAggregation {
  AVG = 0;
  MIN = 1;
  MAX = 2;
  SUM = 3;
}


message QueryTimeSeriesMetricsResponse {
  int64 from = 1;
  int64 to = 2;
  string query = 3;
  repeated DataPoint dataPoints = 4;
}

message DataPoint {
  int64 timestamp = 1;
  double value = 2;
}

service Observability {
  // Queries time series metrics
  rpc QueryTimeSeriesMetrics(QueryTimeSeriesMetricsRequest) returns
      (QueryTimeSeriesMetricsResponse) {
    option (google.api.http) = {
      post : "/observability/v1/metrics/timeseries/query"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Queries time series metrics."
      tags: "metrics"
    };
  }
}
