// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.cache.v1;

import "google/api/annotations.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";

message CreateCacheOptions {
  uint64 ttl_ms = 1;
}
message CreateCacheRequest {
  // Tigris project name
  string project = 1;
  // cache name
  string name = 2;
  // optional configuration
  optional CreateCacheOptions options = 3;
}

message CreateCacheResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "created"
  string status = 2;
}

message DeleteCacheRequest {
  // Tigris project name
  string project = 1;
  // cache name
  string name = 2;
}

message DeleteCacheResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "deleted"
  string status = 2;
}

message SetRequest {
  // Tigris project name
  string project = 1;
  // cache name
  string name = 2;
  // cache key
  string key = 3;
  // free form byte[] value
  bytes value = 4;
  // optional - ttl specific to this key in second
  optional uint64 ex = 5;
  // optional - ttl specific to this key in millisecond
  optional uint64 px = 6;
  // set only if the key doesn't exist
  bool nx = 7;
  // set only if the key exist
  bool xx = 8;
}

message SetResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "set"
  string status = 2;
}

message GetSetRequest {
  // Tigris project name
  string project = 1;
  // cache name
  string name = 2;
  // cache key
  string key = 3;
  // free form byte[] value
  bytes value = 4;
}

message GetSetResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "set"
  string status = 2;
  // An old value if exists
  optional bytes old_value = 3;
}
message GetRequest {
  // Tigris project name
  string project = 1;
  // cache name
  string name = 2;
  // cache key
  string key = 3;
}

message GetResponse {
  // value
  bytes value = 1;
  // expiration ms
  optional uint64 expires_in_ms = 2;
}

message ListCachesRequest {
  // Tigris project name
  string project = 1;
}

message ListCachesResponse {
  // List of caches metadata
  repeated CacheMetadata caches = 1;
}

message CacheMetadata {
  // Cache name
  string name = 1;
}
message DelRequest {
  // Tigris project name
  string project = 1;
  // cache name
  string name = 2;
  // cache key
  string key = 3;
}

message DelResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "deleted" or "not_found"
  string status = 2;
}

message KeysRequest {
  // Tigris project name
  string project = 1;
  // cache name
  string name = 2;
  // optional key pattern
  optional string pattern = 3;
}
message KeysResponse {
  // all the keys
  repeated string keys = 1;
}

service Cache {

  rpc CreateCache(CreateCacheRequest) returns (CreateCacheResponse){
    option (google.api.http) = {
      post : "/v1/projects/{project}/caches/{name}/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Creates the cache"
      tags: "Cache"
    };
  }

  rpc ListCaches(ListCachesRequest) returns (ListCachesResponse){
    option (google.api.http) = {
      get : "/v1/projects/{project}/caches/list"
    };
    option(openapi.v3.operation) = {
      summary: "Lists all the caches for the given project"
      tags: "Cache"
    };
  }

  rpc DeleteCache(DeleteCacheRequest) returns (DeleteCacheResponse){
    option (google.api.http) = {
      delete : "/v1/projects/{project}/caches/{name}/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Deletes the cache"
      tags: "Cache"
    };
  }

  rpc Set(SetRequest) returns (SetResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/caches/{name}/kv/{key}/set"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Sets an entry in the cache"
      tags: "Cache"
    };
  }

  rpc GetSet(GetSetRequest) returns (GetSetResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/caches/{name}/kv/{key}/getset"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Sets an entry in the cache and returns the previous value if exists"
      tags: "Cache"
    };
  }

  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get : "/v1/projects/{project}/caches/{name}/kv/{key}/get"
    };
    option(openapi.v3.operation) = {
      summary: "Reads an entry from cache"
      tags: "Cache"
    };
  }

  rpc Del(DelRequest) returns (DelResponse) {
    option (google.api.http) = {
      delete : "/v1/projects/{project}/caches/{name}/kv/{key}/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Deletes an entry from cache"
      tags: "Cache"
    };
  }

  rpc Keys(KeysRequest) returns (KeysResponse) {
    option (google.api.http) = {
      get : "/v1/projects/{project}/caches/{name}/kv/keys"
    };
    option(openapi.v3.operation) = {
      summary: "Lists all the key for this cache"
      tags: "Cache"
    };
  }
}
