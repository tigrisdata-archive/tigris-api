# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Tigris API Reference
    description: "# Overview\nThis section is organized around HTTP APIs. The APIs accepts JSON requests and returns JSON-encoded responses.The APIs conforms to standard HTTP status codes.\n\n# Errors\nTigris uses conventional HTTP response codes to indicate the success or failure of an API request.The response will  contain an error code or other information that reveals the reason of the error. \nThe error response is in JSON format and is structured like this:\n```\n {\n   \"error\": {\n     \"code\": \"ALREADY_EXISTS\",\n     \"message\": \"row already exists\"\n   }\n }\n\n```\n\n## Status 2xx\n\n  HTTP Code  | Reason\n  ----------------|-------------\n  200 - OK | Everything worked as expected.\n\n\n## Status 4xx\nStatus codes in the `400-499` range indicate errors that have been caused by the requesting application (e.g., a malformed request body has been sent).\nRetrying such requests with the same request body is pointless and _will_ result in the same status code again. Some `4xx` errors can be handled programmatically. Change the request accordingly before retrying. Below you can find the most frequent 4XX errors and how to fix them.\n\n  HTTP Code  | Tigris Code | Reason\n  ----------------|-------------|---------\n  400 - Bad Request | INVALID_ARGUMENT | The request was unacceptable, often due to missing a required parameter. <br>Examples: <li>Missing documents for write request</li><li>Collection or Database name is not following the allowed characters</li>\n  401 - Unauthorized | UNAUTHENTICATED | No valid API key provided. Check that your `api_key` and `api_secret` are correct.\n  403 - Forbidden | PERMISSION_DENIED | The API key doesn't have permissions to perform the request.\n  404 - Not Found | NOT_FOUND | The requested resource doesn't exist. <br>Examples: <li>Database or Collection doesn't exists</li><li>Access Token missing in the request header</li>\n  409 - Conflict | ALREADY_EXISTS | TThe request conflicts with another request (perhaps due to using the same idempotent key). <br>Examples: <li>Trying to insert document again for the primary key that already exists</li><li>Creating a database that already exists</li>\n  429 - Too Many Requests | RESOURCE_EXHAUSTED | Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.\n  \n  \n  \n## Status 5xx\nThe 5xx range indicate an error with Tigris servers (these are rare).\n\n  HTTP Code  | Tigris Code | Reason\n  ----------------|-------------|---------\n  500 - Internal Server Error | UNKNOWN | Something went wrong on Tigris server side.                    \n  501 - Not Implemented       | UNIMPLEMENTED | Not supported by the Tigris server and cannot be handled. \n  502 - Bad Gateway           | BAD_GATEWAY | The API key doesn't have permissions to perform the request.\n  503 - Service Unavailable   | UNAVAILABLE | The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded.\n  504 - Gateway Timeout       | DEADLINE_EXCEEDED | Tigris server is unable to process the request timely. Common causes are that request is expensive, or server is overloaded.\n  \n# Idempotent Requests\n  \n  Tigris provides idempotency guarantees when an API call is disrupted and either no response is returned or an HTTP \n  Status code `429,500,501,502,503` is returned. These errors ensure that the request is not committed and retrying the same request will have the same effect.\n\n\n# Limitations\n<li>Do not rely on case to distinguish between databases or collections names.</li> <li>Database Name and Collection Name cannot be empty and can only have the characters matches the regex: <code>^[a-zA-Z]+[a-zA-Z0-9_]+$</code>.</li> <li>Duplicate field names are not allowed. </li> <li>The maximum allowed document size is 100KB.</li> <li>The maximum allowed transaction size is 10MB.</li>\n"
    license:
        name: Apache License
        url: https://github.com/tigrisdata/tigris/blob/main/LICENSE
    version: 0.0.1
servers:
    - url: https://api.preview.tigrisdata.cloud
      description: Tigris Cloud
    - url: http://localhost:8081
      description: Localhost
paths:
    /v1/auth/token:
        post:
            tags:
                - Authentication
            summary: Access Token
            description: |-
                Endpoint for receiving access token from Tigris Server. The endpoint requires Grant Type(`grant_type`) which has
                 two possible values <i>"REFRESH_TOKEN"</i> or <i>"CLIENT_CREDENTIALS"</i> based on which either Refresh token(`refresh_token`)
                 needs to be set or client credentials(`client_id`, `client_secret`).
            operationId: Auth_GetAccessToken
            requestBody:
                content:
                    x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/GetAccessTokenRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetAccessTokenResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/health:
        get:
            tags:
                - Observability
            summary: Health Check
            description: This endpoint can be used to check the liveness of the server.
            operationId: HealthAPI_Health
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HealthCheckResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
            security: []
    /v1/management/namespace/metadata/{metadataKey}/get:
        post:
            tags:
                - Management
            summary: Reads the Namespace Metadata
            description: GetNamespaceMetadata inserts the user metadata object
            operationId: Management_GetNamespaceMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetNamespaceMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetNamespaceMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespace/metadata/{metadataKey}/insert:
        post:
            tags:
                - Management
            summary: Inserts Namespace Metadata
            description: InsertNamespaceMetadata inserts the namespace metadata object
            operationId: Management_InsertNamespaceMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertNamespaceMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertNamespaceMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespace/metadata/{metadataKey}/update:
        post:
            tags:
                - Management
            summary: Updates Namespace Metadata
            description: UpdateNamespaceMetadata updates the user metadata object
            operationId: Management_UpdateNamespaceMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateNamespaceMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateNamespaceMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespaces/create:
        post:
            tags:
                - Management
            summary: Creates a Namespace
            description: Creates a new namespace, if it does not exist
            operationId: Management_CreateNamespace
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateNamespaceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateNamespaceResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespaces/{namespace_id}:
        get:
            tags:
                - Management
            summary: Lists all Namespaces
            description: List all namespace and optionally lists specific namespace by namespaceId filter, also supports `describe` request.
            operationId: Management_ListNamespaces
            parameters:
                - name: namespace_id
                  in: path
                  description: Optionally filter by specific namespaceId
                  required: true
                  schema:
                    type: string
                - name: describe
                  in: query
                  description: Optionally specify if the description of each namespace is requested
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListNamespacesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/users/metadata/{metadataKey}/get:
        post:
            tags:
                - Management
            summary: Reads the User Metadata
            description: GetUserMetadata inserts the user metadata object
            operationId: Management_GetUserMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetUserMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetUserMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/users/metadata/{metadataKey}/insert:
        post:
            tags:
                - Management
            summary: Inserts User Metadata
            description: insertUserMetadata inserts the user metadata object
            operationId: Management_InsertUserMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertUserMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertUserMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/users/metadata/{metadataKey}/update:
        post:
            tags:
                - Management
            summary: Updates User Metadata
            description: updateUserMetadata updates the user metadata object
            operationId: Management_UpdateUserMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateUserMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/observability/info:
        get:
            tags:
                - Observability
            summary: Information about the server
            description: Provides the information about the server. This information includes returning the server version, etc.
            operationId: Observability_GetInfo
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetInfoResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/observability/metrics/timeseries/query:
        post:
            tags:
                - Observability
            summary: Queries time series metrics
            description: Queries time series metrics
            operationId: Observability_QueryTimeSeriesMetrics
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QueryTimeSeriesMetricsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/QueryTimeSeriesMetricsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/observability/quota/limits:
        post:
            tags:
                - Observability
            summary: Queries current namespace quota limits
            description: Returns current namespace quota limits
            operationId: Observability_QuotaLimits
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QuotaLimitsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/QuotaLimitsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/observability/quota/usage:
        post:
            tags:
                - Observability
            summary: Queries current namespace quota usage
            description: Returns current namespace quota limits
            operationId: Observability_QuotaUsage
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QuotaUsageRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/QuotaUsageResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects:
        get:
            tags:
                - Projects
            summary: List Projects
            description: List returns all the projects.
            operationId: Tigris_ListProjects
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListProjectsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/apps/keys:
        get:
            tags:
                - Application Keys
            summary: List all the app keys
            description: Lists all app keys visible to requesting actor.
            operationId: Tigris_ListAppKeys
            parameters:
                - name: project
                  in: path
                  description: Project name filter
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListAppKeysResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/apps/keys/create:
        post:
            tags:
                - Application Keys
            summary: Creates the app key
            description: Create an app key.
            operationId: Tigris_CreateAppKey
            parameters:
                - name: project
                  in: path
                  description: Project name
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateAppKeyRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateAppKeyResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/apps/keys/delete:
        delete:
            tags:
                - Application Keys
            summary: Deletes the app key
            description: Delete an app key.
            operationId: Tigris_DeleteAppKey
            parameters:
                - name: project
                  in: path
                  description: project name
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteAppKeyRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteAppKeyResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/apps/keys/rotate:
        post:
            tags:
                - Application Keys
            summary: Rotates the app key secret
            description: Endpoint is used to rotate the secret for the app key.
            operationId: Tigris_RotateAppKeySecret
            parameters:
                - name: project
                  in: path
                  description: project name
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RotateAppKeyRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RotateAppKeyResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/apps/keys/update:
        post:
            tags:
                - Application Keys
            summary: Updates the description of the app key
            description: Update the description of an app key.
            operationId: Tigris_UpdateAppKey
            parameters:
                - name: project
                  in: path
                  description: project name -  this is not allowed to update
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateAppKeyRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateAppKeyResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/caches/list:
        get:
            tags:
                - Cache
            summary: Lists all the caches for the given project
            operationId: Cache_ListCaches
            parameters:
                - name: project
                  in: path
                  description: Tigris project name
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListCachesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/caches/{name}/create:
        post:
            tags:
                - Cache
            summary: Creates the cache
            operationId: Cache_CreateCache
            parameters:
                - name: project
                  in: path
                  description: Tigris project name
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: cache name
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateCacheRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateCacheResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/caches/{name}/delete:
        delete:
            tags:
                - Cache
            summary: Deletes the cache
            operationId: Cache_DeleteCache
            parameters:
                - name: project
                  in: path
                  description: Tigris project name
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: cache name
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteCacheRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteCacheResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/caches/{name}/keys:
        get:
            tags:
                - Cache
            summary: Lists all the key for this cache
            operationId: Cache_Keys
            parameters:
                - name: project
                  in: path
                  description: Tigris project name
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: cache name
                  required: true
                  schema:
                    type: string
                - name: cursor
                  in: query
                  description: optional - cursor - skip this argument if no cursor is associated
                  schema:
                    type: integer
                    format: uint64
                - name: count
                  in: query
                  description: optional - count of keys to return a stream response line.
                  schema:
                    type: integer
                    format: int64
                - name: pattern
                  in: query
                  description: optional key pattern
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeysResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/caches/{name}/{key}/delete:
        delete:
            tags:
                - Cache
            summary: Deletes an entry from cache
            operationId: Cache_Del
            parameters:
                - name: project
                  in: path
                  description: Tigris project name
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: cache name
                  required: true
                  schema:
                    type: string
                - name: key
                  in: path
                  description: cache key
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DelRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DelResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/caches/{name}/{key}/get:
        get:
            tags:
                - Cache
            summary: Reads an entry from cache
            operationId: Cache_Get
            parameters:
                - name: project
                  in: path
                  description: Tigris project name
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: cache name
                  required: true
                  schema:
                    type: string
                - name: key
                  in: path
                  description: cache key
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/caches/{name}/{key}/getset:
        post:
            tags:
                - Cache
            summary: Sets an entry in the cache and returns the previous value if exists
            operationId: Cache_GetSet
            parameters:
                - name: project
                  in: path
                  description: Tigris project name
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: cache name
                  required: true
                  schema:
                    type: string
                - name: key
                  in: path
                  description: cache key
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetSetRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetSetResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/caches/{name}/{key}/set:
        post:
            tags:
                - Cache
            summary: Sets an entry in the cache
            operationId: Cache_Set
            parameters:
                - name: project
                  in: path
                  description: Tigris project name
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: cache name
                  required: true
                  schema:
                    type: string
                - name: key
                  in: path
                  description: cache key
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SetRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SetResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/create:
        post:
            tags:
                - Projects
            summary: Create Project
            description: Creates a new project. Returns an AlreadyExists error with a status code 409 if the project already exists.
            operationId: Tigris_CreateProject
            parameters:
                - name: project
                  in: path
                  description: Create project with this name.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateProjectRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateProjectResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/branches:
        get:
            tags:
                - Database
            summary: List database branches
            description: List database branches
            operationId: Tigris_ListBranches
            parameters:
                - name: project
                  in: path
                  description: List database branches in this project
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListBranchesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/branches/{branch}/create:
        post:
            tags:
                - Database
            summary: Create a database branch
            description: Creates a new database branch, if not already existing.
            operationId: Tigris_CreateBranch
            parameters:
                - name: project
                  in: path
                  description: Create a database branch in this project
                  required: true
                  schema:
                    type: string
                - name: branch
                  in: path
                  description: 'Name of the database branch to be created. <p></p>**Note**: `main` is a reserved branch name for primary database and is automatically created with CreateProject'
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateBranchRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateBranchResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/branches/{branch}/delete:
        delete:
            tags:
                - Database
            summary: Delete a database branch
            description: |-
                Deletes a database branch, if exists.
                 Throws 400 Bad Request if "main" branch is being deleted
            operationId: Tigris_DeleteBranch
            parameters:
                - name: project
                  in: path
                  description: Delete a database branch in this project
                  required: true
                  schema:
                    type: string
                - name: branch
                  in: path
                  description: 'Name of the database branch to delete. <p></p>**Note**: `main` branch cannot be deleted, use DeleteProject instead'
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteBranchRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteBranchResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections:
        get:
            tags:
                - Database
            summary: List Collections
            description: List all the collections present in the project passed in the request.
            operationId: Tigris_ListCollections
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to list collections.
                  required: true
                  schema:
                    type: string
                - name: branch
                  in: query
                  description: Optionally specify a database branch name to perform operation on
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListCollectionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/createOrUpdate:
        post:
            tags:
                - Collections
            summary: Create or update a collection
            description: |-
                Creates a new collection or atomically upgrades the collection to the new schema provided in the request.
                 Schema changes are applied atomically and immediately without any downtime.
                 Tigris Offers two types of collections: <p></p>
                    <li> `DOCUMENTS`: Offers rich CRUD APIs.
                    <li> `MESSAGES`: Offers event streaming APIs.
            operationId: Tigris_CreateOrUpdateCollection
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to create or update collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to create.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateOrUpdateCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateOrUpdateCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/describe:
        post:
            tags:
                - Collections
            summary: Describe Collection
            description: Returns the information related to the collection. This can be used to retrieve the schema or size of the collection.
            operationId: Tigris_DescribeCollection
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to get description of its collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Name of the collection.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DescribeCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/documents/delete:
        delete:
            tags:
                - Collections
            summary: Delete Documents
            description: Delete a range of documents in the collection using the condition provided in the filter.
            operationId: Tigris_Delete
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to delete documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/documents/explain:
        post:
            tags:
                - Collections
            summary: Explain Read Documents
            description: |-
                Explain takes the same parameters as Read and returns how the Tigris Query Planner would process the
                 response
            operationId: Tigris_Explain
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to read documents from.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to read documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReadRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExplainResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/documents/import:
        post:
            tags:
                - Collections
            summary: Import Documents
            description: |-
                Imports documents into the collection.

                 It automatically:
                  * Detects the schema of the documents in the batch
                  * Evolves the schema as soon as it's backward compatible
                  * Creates collection with inferred schema (if requested)
            operationId: Tigris_Import
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to import documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to import documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ImportRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ImportResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/documents/insert:
        post:
            tags:
                - Collections
            summary: Insert Documents
            description: |-
                Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
                 in the request already exists. Insert provides idempotency by returning an error if the document
                 already exists. To replace documents, use REPLACE API instead of INSERT.
            operationId: Tigris_Insert
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to insert documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/documents/read:
        post:
            tags:
                - Collections
            summary: Read Documents
            description: |-
                Reads a range of documents from the collection, or messages from a collection in case of event streaming. Tigris does not require you to
                 index any fields and automatically index all the fields which means you can filter by any field in the document.
                 An empty filter will trigger reading all the documents inside this collection. The API supports pagination that
                 can be used by passing `Limit/Skip` parameters. The `skip` parameter skips the number of documents from the start and
                 the `limit` parameter is used to specify the number of documents to read. You can find more detailed documentation
                 of the Read API <a href="https://docs.tigrisdata.com/overview/query" title="here">here</a>.
            operationId: Tigris_Read
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to read documents from.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to read documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReadRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StreamingReadResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/documents/replace:
        put:
            tags:
                - Collections
            summary: Insert or Replace Documents
            description: Inserts the documents or replaces the existing documents in the collections.
            operationId: Tigris_Replace
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to replace documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to replace documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReplaceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReplaceResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/documents/search:
        post:
            tags:
                - Collections
            summary: Search Documents.
            description: |-
                Searches a collection for the documents matching the query, or messages in case of event streaming. A search can be
                 a term search or a phrase search. Search API allows filtering the result set using filters as documented <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.
                 You can also perform a faceted search by passing the fields in the facet parameter.
                 You can find more detailed documentation of the Search API with multiple examples <a href="https://docs.tigrisdata.com/overview/search" title="here">here</a>.
            operationId: Tigris_Search
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to search documents from.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to search documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StreamingSearchResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/documents/update:
        put:
            tags:
                - Collections
            summary: Update Documents.
            description: Update a range of documents in the collection using the condition provided in the filter.
            operationId: Tigris_Update
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target  to update documents
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to update documents
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/collections/{collection}/drop:
        delete:
            tags:
                - Collections
            summary: Drop Collection
            description: |-
                Drops the collection inside this project. This API deletes all of the
                 documents inside this collection and any metadata associated with it.
            operationId: Tigris_DropCollection
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to delete collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to delete.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DropCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DropCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/describe:
        post:
            tags:
                - Database
            summary: Describe database
            description: |-
                This API returns information related to the project along with all the collections inside the project.
                 This can be used to retrieve the size of the project or to retrieve schemas, branches and the size of all the collections present in this project.
            operationId: Tigris_DescribeDatabase
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to get description.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DescribeDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeDatabaseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/transactions/begin:
        post:
            tags:
                - Database
            summary: Begin a transaction
            description: |-
                Starts a new transaction and returns a transactional object. All reads/writes performed
                 within a transaction will run with serializable isolation. Tigris offers global transactions,
                 with ACID properties and strict serializability.
            operationId: Tigris_BeginTransaction
            parameters:
                - name: project
                  in: path
                  description: Project name whose DB this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeginTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeginTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/transactions/commit:
        post:
            tags:
                - Database
            summary: Commit a Transaction
            description: |-
                Atomically commit all the changes performed in the context of the transaction. Commit provides all
                 or nothing semantics by ensuring no partial updates are in the project due to a transaction failure.
            operationId: Tigris_CommitTransaction
            parameters:
                - name: project
                  in: path
                  description: Project name whose DB this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CommitTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CommitTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/database/transactions/rollback:
        post:
            tags:
                - Database
            summary: Rollback a transaction
            description: |-
                Rollback transaction discards all the changes
                 performed in the transaction
            operationId: Tigris_RollbackTransaction
            parameters:
                - name: project
                  in: path
                  description: Project name whose DB this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RollbackTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RollbackTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/delete:
        delete:
            tags:
                - Projects
            summary: Delete Project and all resources under project
            description: Delete Project deletes all the collections in this project along with all of the documents, and associated metadata for these collections.
            operationId: Tigris_DeleteProject
            parameters:
                - name: project
                  in: path
                  description: 'Delete Project with this name. <p></p>**Note**: Deletes all resources under this project. Use with caution.'
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteProjectRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteProjectResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/realtime/channels:
        get:
            tags:
                - Realtime
            summary: Get all channels for your application project
            operationId: Realtime_GetRTChannels
            parameters:
                - name: project
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetRTChannelsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/realtime/channels/{channel}:
        get:
            tags:
                - Realtime
            summary: Get the details about a channel
            operationId: Realtime_GetRTChannel
            parameters:
                - name: project
                  in: path
                  required: true
                  schema:
                    type: string
                - name: channel
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetRTChannelResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/realtime/channels/{channel}/messages:
        get:
            tags:
                - Realtime
            summary: Get all messages for a channel
            operationId: Realtime_ReadMessages
            parameters:
                - name: project
                  in: path
                  required: true
                  schema:
                    type: string
                - name: channel
                  in: path
                  required: true
                  schema:
                    type: string
                - name: session_id
                  in: query
                  schema:
                    type: string
                - name: socket_id
                  in: query
                  schema:
                    type: string
                - name: event
                  in: query
                  schema:
                    type: string
                - name: start
                  in: query
                  schema:
                    type: string
                - name: end
                  in: query
                  schema:
                    type: string
                - name: limit
                  in: query
                  schema:
                    type: integer
                    format: int64
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadMessagesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - Realtime
            summary: push messages to a single channel
            operationId: Realtime_Messages
            parameters:
                - name: project
                  in: path
                  required: true
                  schema:
                    type: string
                - name: channel
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MessagesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MessagesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/realtime/channels/{channel}/presence:
        get:
            tags:
                - Realtime
            summary: Presence about the channel
            operationId: Realtime_Presence
            parameters:
                - name: project
                  in: path
                  required: true
                  schema:
                    type: string
                - name: channel
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PresenceResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/realtime/channels/{channel}/subscriptions:
        get:
            tags:
                - Realtime
            summary: Get the subscriptions details about a channel
            operationId: Realtime_ListSubscriptions
            parameters:
                - name: project
                  in: path
                  required: true
                  schema:
                    type: string
                - name: channel
                  in: path
                  required: true
                  schema:
                    type: string
                - name: page_size
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: page
                  in: query
                  schema:
                    type: integer
                    format: int32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListSubscriptionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/search/indexes:
        get:
            tags:
                - Search
            summary: List search indexes
            operationId: Search_ListIndexes
            parameters:
                - name: project
                  in: path
                  description: Tigris project name.
                  required: true
                  schema:
                    type: string
                - name: filter.type
                  in: query
                  description: An index can be either managed by user explicitly then the type is set as "user" or the index is backed by Tigris collection. In case it is backed by Tigris collection the type is "tigris".
                  schema:
                    type: string
                - name: filter.collection
                  in: query
                  description: Applicable only in case index is backed by Tigris collection.
                  schema:
                    type: string
                - name: filter.branch
                  in: query
                  description: Applicable only in case index is backed by Tigris collection. This is the database branch for the above collection. For primary database it can be omitted or "main" can be passed.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListIndexesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/search/indexes/{index}/documents:
        get:
            tags:
                - Search
            summary: Get a single or multiple documents
            description: |-
                Retrieves one or more documents by id. The response is an array of documents in the same order it is requests.
                 A null is returned for the documents that are not found.
            operationId: Search_Get
            parameters:
                - name: project
                  in: path
                  description: Tigris project name.
                  required: true
                  schema:
                    type: string
                - name: index
                  in: path
                  description: index name where to create documents.
                  required: true
                  schema:
                    type: string
                - name: ids
                  in: query
                  description: document id.
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetDocumentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        put:
            tags:
                - Search
            summary: Create or replace documents in an index
            description: |-
                Creates or replaces one or more documents. Each document is a JSON object. A document is replaced
                 if it already exists. An "id" is generated automatically in case it is missing in the document. The
                 document is created if "id" doesn't exists otherwise it is replaced. Returns an array of status indicating
                 the status of each document.
            operationId: Search_CreateOrReplace
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to insert documents.
                  required: true
                  schema:
                    type: string
                - name: index
                  in: path
                  description: index name where to create documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateOrReplaceDocumentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateOrReplaceDocumentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - Search
            summary: Create multiple documents
            description: |-
                Create is used for indexing a single or multiple documents. The API expects an array of documents.
                 Each document is a JSON object. An "id" is optional and the server can automatically generate it for you in
                 case it is missing. In cases when an id is provided in the document and the document already exists then that
                 document will not be indexed and in the response there will be an error corresponding to that document id other
                 documents will succeed. Returns an array of status indicating the status of each document.
            operationId: Search_Create
            parameters:
                - name: project
                  in: path
                  description: Tigris project name.
                  required: true
                  schema:
                    type: string
                - name: index
                  in: path
                  description: index name where to create documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateDocumentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateDocumentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - Search
            summary: Delete documents by ids
            description: |-
                Delete one or more documents by id. Returns an array of status indicating the status of each document. Each status
                 has an error field that is set to null in case document is deleted successfully otherwise it will non null with
                 an error code and message.
            operationId: Search_Delete
            parameters:
                - name: project
                  in: path
                  description: The project name.
                  required: true
                  schema:
                    type: string
                - name: index
                  in: path
                  description: The index name of the documents that needs deletion.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteDocumentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteDocumentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - Search
                - Search
            summary: Update documents in an index
            description: |-
                Updates one or more documents by "id". Each document is required to have the
                 "id" field in it. Returns an array of status indicating the status of each document. Each status
                 has an error field that is set to null in case document is updated successfully otherwise the error
                 field is set with a code and message.
            operationId: Search_Update
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to insert documents.
                  required: true
                  schema:
                    type: string
                - name: index
                  in: path
                  description: Index name where to create documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateDocumentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateDocumentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/search/indexes/{index}/documents/deleteByQuery:
        delete:
            tags:
                - Search
            summary: Delete documents by query
            description: |-
                DeleteByQuery is used to delete documents that match the filter. A filter is required. To delete document by id,
                 you can pass the filter as follows ```{"id": "test"}```. Returns a count of number of documents deleted.
            operationId: Search_DeleteByQuery
            parameters:
                - name: project
                  in: path
                  description: The project name.
                  required: true
                  schema:
                    type: string
                - name: index
                  in: path
                  description: The index name of the documents that needs deletion.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteByQueryRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteByQueryResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/search/indexes/{index}/documents/search:
        post:
            tags:
                - Search
            summary: Search Documents.
            description: |-
                Searches an index for the documents matching the query. A search can be a term search or a phrase search.
                 Search API allows filtering the result set using filters as documented
                 <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>. You can also perform
                 a faceted search by passing the fields in the facet parameter. You can find more detailed documentation of the
                 Search API with multiple examples <a href="https://docs.tigrisdata.com/overview/search" title="here">here</a>.
            operationId: Search_Search
            parameters:
                - name: project
                  in: path
                  description: Project name whose db is under target to search documents from.
                  required: true
                  schema:
                    type: string
                - name: index
                  in: path
                  description: The index name to search documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchIndexRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchIndexResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/search/indexes/{index}/documents/{id}:
        post:
            tags:
                - Search
            summary: Create a single document
            description: |-
                CreateById is used for indexing a single document. The API expects a single document. An "id" is optional
                 and the server can automatically generate it for you in case it is missing. In cases an id is provided in
                 the document and the document already exists then that document will not be indexed and an error is returned
                 with HTTP status code 409.
            operationId: Search_CreateById
            parameters:
                - name: project
                  in: path
                  description: Tigris project name.
                  required: true
                  schema:
                    type: string
                - name: index
                  in: path
                  description: index name where to create document.
                  required: true
                  schema:
                    type: string
                - name: id
                  in: path
                  description: document id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateByIdRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateByIdResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/search/indexes/{name}:
        get:
            tags:
                - Search
            summary: Get information about a search index
            operationId: Search_GetIndex
            parameters:
                - name: project
                  in: path
                  description: Tigris project name.
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: index name.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetIndexResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        put:
            tags:
                - Search
            summary: Creates or updates search index
            operationId: Search_CreateOrUpdateIndex
            parameters:
                - name: project
                  in: path
                  description: Tigris project name.
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: search index name.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateOrUpdateIndexRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateOrUpdateIndexResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - Search
            summary: Deletes search index
            operationId: Search_DeleteIndex
            parameters:
                - name: project
                  in: path
                  description: Tigris project name.
                  required: true
                  schema:
                    type: string
                - name: name
                  in: path
                  description: index name.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteIndexRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteIndexResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        AdditionalFunction:
            type: object
            properties:
                rollup:
                    $ref: '#/components/schemas/RollupFunction'
            description: Additional function to apply on metrics query
        AppKey:
            type: object
            properties:
                id:
                    type: string
                    description: Generated client id
                name:
                    type: string
                    description: A human readable app name
                description:
                    type: string
                    description: A human readable app description
                secret:
                    type: string
                    description: Generated app secret
                created_at:
                    type: integer
                    description: Created at
                    format: int64
                created_by:
                    type: string
                    description: Created by
                updated_at:
                    type: integer
                    description: Updated at
                    format: int64
                updated_by:
                    type: string
                    description: Updated by
                project:
                    type: string
                    description: Project it belongs to
            description: An user AppKey
        BeginTransactionRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/TransactionOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
            description: Start new transaction in project specified by "project".
        BeginTransactionResponse:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Start transaction returns transaction context  which uniquely identifies the transaction
        BranchInfo:
            type: object
            properties:
                branch:
                    type: string
                    description: Branch name
                metadata:
                    $ref: '#/components/schemas/BranchMetadata'
        BranchMetadata:
            type: object
            properties: {}
        CacheMetadata:
            type: object
            properties:
                name:
                    type: string
                    description: Cache name
        ChannelMetadata:
            type: object
            properties:
                channel:
                    type: string
        Collation:
            type: object
            properties:
                case:
                    type: string
            description: A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
        CollectionDescription:
            type: object
            properties:
                collection:
                    type: string
                    description: Name of the collection.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
                schema:
                    type: object
                    description: Collections schema
                size:
                    type: integer
                    description: Collection size in bytes
                    format: int64
                indexes:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionIndex'
                    description: The index infromation
        CollectionIndex:
            type: object
            properties:
                name:
                    type: string
                state:
                    type: string
                fields:
                    type: array
                    items:
                        $ref: '#/components/schemas/Field'
        CollectionInfo:
            type: object
            properties:
                collection:
                    type: string
                    description: Collection name.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
        CollectionMetadata:
            type: object
            properties: {}
        CollectionOptions:
            type: object
            properties: {}
            description: Collection requests modifying options.
        CommitTransactionRequest:
            type: object
            properties:
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
            description: Commit transaction with the given ID
        CommitTransactionResponse:
            type: object
            properties:
                status:
                    type: string
                    description: Status of commit transaction operation.
        CreateAppKeyRequest:
            type: object
            properties:
                name:
                    type: string
                    description: A human readable app name
                description:
                    type: string
                    description: A human readable app description
            description: Request creation of user app key
        CreateAppKeyResponse:
            type: object
            properties:
                created_app_key:
                    $ref: '#/components/schemas/AppKey'
            description: CreateAppKeyResponse returns created app keys
        CreateBranchRequest:
            type: object
            properties: {}
        CreateBranchResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created".
        CreateByIdRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Tigris project name.
                index:
                    type: string
                    description: index name where to create document.
                id:
                    type: string
                    description: document id.
                document:
                    type: string
                    description: A JSON document that needs to be indexed.
                    format: byte
        CreateByIdResponse:
            type: object
            properties:
                id:
                    type: string
                    description: Returns the id of the created document.
        CreateCacheOptions:
            type: object
            properties:
                ttl_ms:
                    type: integer
                    format: uint64
        CreateCacheRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/CreateCacheOptions'
        CreateCacheResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created"
        CreateDocumentRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Tigris project name.
                index:
                    type: string
                    description: index name where to create documents.
                documents:
                    type: array
                    items:
                        type: string
                        format: byte
                    description: An array of documents to be created or replaced. Each document is a JSON object.
        CreateDocumentResponse:
            type: object
            properties:
                status:
                    type: array
                    items:
                        $ref: '#/components/schemas/DocStatus'
                    description: An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
        CreateNamespaceRequest:
            type: object
            properties:
                code:
                    type: integer
                    description: 'Optional: unique id'
                    format: uint32
                id:
                    type: string
                    description: 'Optional: unique string id'
                name:
                    type: string
                    description: 'Required: The display name for namespace.'
        CreateNamespaceResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created".
                namespace:
                    $ref: '#/components/schemas/NamespaceInfo'
        CreateOrReplaceDocumentRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name whose db is under target to insert documents.
                index:
                    type: string
                    description: index name where to create documents.
                documents:
                    type: array
                    items:
                        type: string
                        format: byte
                    description: An array of documents to create. Each document is a JSON object. In case an id is missing then the server will automatically generate it for you and create the document and in case an id is provided in the document and the document already exists then that document will not index and in the response there will be an error corresponding to that document id other documents will succeed.
        CreateOrReplaceDocumentResponse:
            type: object
            properties:
                status:
                    type: array
                    items:
                        $ref: '#/components/schemas/DocStatus'
                    description: An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
        CreateOrUpdateCollectionRequest:
            type: object
            properties:
                schema:
                    type: object
                    description: 'The schema specifications are same as JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>.<p></p> Schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 128    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`'
                only_create:
                    type: boolean
                    description: If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
        CreateOrUpdateCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created" or "updated"
        CreateOrUpdateIndexRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Tigris project name.
                name:
                    type: string
                    description: search index name.
                schema:
                    type: string
                    description: 'schema of the index. The schema specifications are same as JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>.<p></p> Schema example: `{  "title": "ecommerce_index",  "description": "an ecommerce store search index",  "properties": {    "name": {      "description": "Name of the product",      "type": "string",      "maxLength": 128    },    "brand": {      "description": "Brand of the product",      "type": "string"    },    "price": {      "description": "Price of the product",      "type": "number"    }  } }`'
                    format: byte
                only_create:
                    type: boolean
                    description: If set to `true` then a conflict with HTTP Status code 409 is returned if an index already exists. The default is false.
        CreateOrUpdateIndexResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created"
        CreateProjectRequest:
            type: object
            properties: {}
        CreateProjectResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created".
        DataPoint:
            type: object
            properties:
                timestamp:
                    type: integer
                    format: int64
                value:
                    type: number
                    format: double
            description: Represents the data point in timeseries.
        DatabaseMetadata:
            type: object
            properties: {}
        DelRequest:
            type: object
            properties: {}
        DelResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "deleted" or "not_found"
        DeleteAppKeyRequest:
            type: object
            properties:
                id:
                    type: string
                    description: app_key id
            description: Request deletion of an app key
        DeleteAppKeyResponse:
            type: object
            properties:
                deleted:
                    type: boolean
                    description: status flag for delete operation
            description: AppKeys returns the flag to convey if app key was deleted
        DeleteBranchRequest:
            type: object
            properties: {}
        DeleteBranchResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "deleted".
        DeleteByQueryRequest:
            type: object
            properties:
                project:
                    type: string
                    description: The project name.
                index:
                    type: string
                    description: The index name of the documents that needs deletion.
                filter:
                    type: string
                    description: 'A filter is required to delete matching documents. To delete document by id, you can pass the filter as follows ```{"id": "test"}```'
                    format: byte
        DeleteByQueryResponse:
            type: object
            properties:
                count:
                    type: integer
                    description: The number of documents deleted.
                    format: int32
        DeleteCacheRequest:
            type: object
            properties: {}
        DeleteCacheResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "deleted"
        DeleteDocumentRequest:
            type: object
            properties:
                project:
                    type: string
                    description: The project name.
                index:
                    type: string
                    description: The index name of the documents that needs deletion.
                ids:
                    type: array
                    items:
                        type: string
                    description: A list of ids
        DeleteDocumentResponse:
            type: object
            properties:
                status:
                    type: array
                    items:
                        $ref: '#/components/schemas/DocStatus'
                    description: An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
        DeleteIndexRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Tigris project name.
                name:
                    type: string
                    description: index name.
        DeleteIndexResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "deleted".
        DeleteProjectRequest:
            type: object
            properties: {}
        DeleteProjectResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "dropped".
        DeleteRequest:
            type: object
            properties:
                filter:
                    type: object
                    description: 'Delete documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To delete a user document where the id has a value 1: ```{"id": 1 }``` <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                options:
                    $ref: '#/components/schemas/DeleteRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
        DeleteRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
                collation:
                    $ref: '#/components/schemas/Collation'
                limit:
                    type: integer
                    description: Limit the number of documents to be deleted
                    format: int64
            description: Additional options for deleted requests.
        DeleteResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: an enum with value set as "deleted"
                deleted_count:
                    type: integer
                    description: Returns the number of documents deleted.
                    format: int32
        DescribeCollectionRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name whose db is under target to get description of its collection.
                collection:
                    type: string
                    description: Name of the collection.
                schema_format:
                    type: string
                    description: Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
        DescribeCollectionResponse:
            type: object
            properties:
                collection:
                    type: string
                    description: Name of the collection.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
                schema:
                    type: object
                    description: Schema of this collection.
                size:
                    type: integer
                    description: The size of this collection in bytes.
                    format: int64
                indexes:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionIndex'
                    description: The index infromation
            description: A detailed description of the collection. The description returns collection metadata and the schema.
        DescribeDatabaseRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name whose db is under target to get description.
                schema_format:
                    type: string
                    description: Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
        DescribeDatabaseResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/DatabaseMetadata'
                collections:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionDescription'
                    description: A detailed description about all the collections. The description returns collection metadata and the schema.
                size:
                    type: integer
                    description: Sum of all the collections sizes present in this database
                    format: int64
                branches:
                    type: array
                    items:
                        type: string
                    description: List of all the branches in this database
            description: A detailed description of the database and all the associated collections. Description of the collection includes schema details as well.
        DescribeNamespacesData:
            type: object
            properties:
                details:
                    type: string
        DocStatus:
            type: object
            properties:
                id:
                    type: string
                    description: An id of the document.
                error:
                    $ref: '#/components/schemas/Error'
        DropCollectionRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/CollectionOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        DropCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "dropped".
        Error:
            type: object
            properties:
                code:
                    enum:
                        - OK
                        - CANCELLED
                        - UNKNOWN
                        - INVALID_ARGUMENT
                        - DEADLINE_EXCEEDED
                        - NOT_FOUND
                        - ALREADY_EXISTS
                        - PERMISSION_DENIED
                        - RESOURCE_EXHAUSTED
                        - FAILED_PRECONDITION
                        - ABORTED
                        - OUT_OF_RANGE
                        - UNIMPLEMENTED
                        - INTERNAL
                        - UNAVAILABLE
                        - DATA_LOSS
                        - UNAUTHENTICATED
                        - CONFLICT
                        - BAD_GATEWAY
                        - METHOD_NOT_ALLOWED
                        - CONTENT_TOO_LARGE
                    type: string
                    description: The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
                    format: enum
                message:
                    type: string
                    description: A developer-facing descriptive error message
            description: The Error type defines a logical error model
        ExplainResponse:
            type: object
            properties:
                collection:
                    type: string
                    description: The collection that the explain response is run against
                read_type:
                    type: string
                    description: The Type of read can be either Scan or Secondary Index
                filter:
                    type: string
                    description: The filter used in the query
                sorting:
                    type: string
                    description: The type of sort used
        FacetCount:
            type: object
            properties:
                count:
                    type: integer
                    format: int64
                value:
                    type: string
        FacetStats:
            type: object
            properties:
                avg:
                    type: number
                    description: Average of all values in a field. Only available for numeric fields
                    format: double
                max:
                    type: number
                    description: Maximum of all values in a field. Only available for numeric fields
                    format: double
                min:
                    type: number
                    description: Minimum of all values in a field. Only available for numeric fields
                    format: double
                sum:
                    type: number
                    description: Sum of all values in a field. Only available for numeric fields
                    format: double
                count:
                    type: integer
                    description: Total number of values in a field
                    format: int64
            description: Additional stats for faceted field
        Field:
            type: object
            properties:
                name:
                    type: string
        GetAccessTokenRequest:
            type: object
            properties:
                grant_type:
                    enum:
                        - REFRESH_TOKEN
                        - CLIENT_CREDENTIALS
                    type: string
                    format: enum
                refresh_token:
                    type: string
                    description: Refresh token is required when grant type is set as `REFRESH_TOKEN`.
                client_id:
                    type: string
                    description: Client Id is required when grant type is set as `CLIENT_CREDENTIALS`.
                client_secret:
                    type: string
                    description: Your Tigris API Key is required when grant type is set as `CLIENT_CREDENTIALS`.
            description: The Request message for the GetAccessToken. The grant type is a required field and based on the grant type the other fields are used as mentioned below.
        GetAccessTokenResponse:
            type: object
            properties:
                access_token:
                    type: string
                    description: An Access Token.
                refresh_token:
                    type: string
                    description: The Refresh Token.
                expires_in:
                    type: integer
                    description: Access token expiration timeout in seconds.
                    format: int32
            description: The response of GetAccessToken which contains access_token and optionally refresh_token.
        GetDocumentResponse:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        $ref: '#/components/schemas/SearchHit'
                    description: An array of documents.
        GetIndexResponse:
            type: object
            properties:
                index:
                    $ref: '#/components/schemas/IndexInfo'
        GetInfoResponse:
            type: object
            properties:
                server_version:
                    type: string
        GetNamespaceMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: object
            description: Request namespace metadata
        GetNamespaceMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: object
            description: Namespace metadata response
        GetRTChannelResponse:
            type: object
            properties:
                channel:
                    type: string
        GetRTChannelsResponse:
            type: object
            properties:
                channels:
                    type: array
                    items:
                        $ref: '#/components/schemas/ChannelMetadata'
        GetResponse:
            type: object
            properties:
                value:
                    type: string
                    description: value
                    format: byte
                expires_in_ms:
                    type: integer
                    description: expiration ms
                    format: uint64
        GetSetRequest:
            type: object
            properties:
                value:
                    type: string
                    description: free form byte[] value
                    format: byte
        GetSetResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "set"
                old_value:
                    type: string
                    description: An old value if exists
                    format: byte
        GetUserMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: object
            description: Request user metadata
        GetUserMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                userId:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: string
                    format: byte
            description: User metadata response
        GroupedSearchHits:
            type: object
            properties:
                group_keys:
                    type: array
                    items:
                        type: string
                hits:
                    type: array
                    items:
                        $ref: '#/components/schemas/SearchHit'
        HealthCheckResponse:
            type: object
            properties:
                response:
                    type: string
        ImportRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to import. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/ImportRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
                create_collection:
                    type: boolean
                    description: Allow to create collection if it doesn't exists
                primary_key:
                    type: array
                    items:
                        type: string
                    description: List of fields which constitutes primary key of the collection If not specified and field with name 'id' is present, it's used as a primary key, further if inferred type is UUID, then it's set as autogenerated.
                autogenerated:
                    type: array
                    items:
                        type: string
                    description: The list of autogenerated fields of the collection
        ImportRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: additional options for import requests.
        ImportResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: An enum with value set as "inserted"
                keys:
                    type: array
                    items:
                        type: string
                        format: byte
                    description: an array returns the value of the primary keys.
        IndexInfo:
            type: object
            properties:
                name:
                    type: string
                    description: Name of the index.
                schema:
                    type: string
                    description: Schema of the index.
                    format: byte
        InsertNamespaceMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: object
            description: Request insertion of namespace metadata
        InsertNamespaceMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: object
            description: Insertion of namespace metadata response
        InsertRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to insert. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/InsertRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
        InsertRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: additional options for insert requests.
        InsertResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: An enum with value set as "inserted"
                keys:
                    type: array
                    items:
                        type: string
                        format: byte
                    description: an array returns the value of the primary keys.
        InsertUserMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: object
            description: Request insertion of user metadata
        InsertUserMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                userId:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: object
            description: Insertion of user metadata response
        KeysResponse:
            type: object
            properties:
                keys:
                    type: array
                    items:
                        type: string
                    description: keys
                cursor:
                    type: integer
                    description: cursor - 0 is the keys scan is finished, non-zero cursor can be passed in next keys request to continue the scan this is useful if streaming breaks and user wants to resume stream
                    format: uint64
        ListAppKeysResponse:
            type: object
            properties:
                app_keys:
                    type: array
                    items:
                        $ref: '#/components/schemas/AppKey'
            description: ListAppKeysResponse returns one or more visible app keys to user
        ListBranchesResponse:
            type: object
            properties:
                branches:
                    type: array
                    items:
                        $ref: '#/components/schemas/BranchInfo'
                    description: List of all the branches in this database
        ListCachesResponse:
            type: object
            properties:
                caches:
                    type: array
                    items:
                        $ref: '#/components/schemas/CacheMetadata'
                    description: List of caches metadata
        ListCollectionsResponse:
            type: object
            properties:
                collections:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionInfo'
                    description: List of the collections info in the database.
        ListIndexesResponse:
            type: object
            properties:
                indexes:
                    type: array
                    items:
                        $ref: '#/components/schemas/IndexInfo'
                    description: List of indexes.
        ListNamespacesResponse:
            type: object
            properties:
                namespaces:
                    type: array
                    items:
                        $ref: '#/components/schemas/NamespaceInfo'
                data:
                    $ref: '#/components/schemas/DescribeNamespacesData'
        ListProjectsResponse:
            type: object
            properties:
                projects:
                    type: array
                    items:
                        $ref: '#/components/schemas/ProjectInfo'
                    description: List of the projects.
        ListSubscriptionResponse:
            type: object
            properties:
                devices:
                    type: array
                    items:
                        type: string
        Match:
            type: object
            properties:
                fields:
                    type: array
                    items:
                        $ref: '#/components/schemas/MatchField'
                score:
                    type: string
                vector_distance:
                    type: number
                    format: double
        MatchField:
            type: object
            properties:
                name:
                    type: string
        Message:
            type: object
            properties:
                id:
                    type: string
                    description: an optional id if idempotency is needed to ensure only a single time message is published during retries. If not specified then server will automatically add an id to message.
                name:
                    type: string
                sequence:
                    type: string
                data:
                    type: string
                    format: byte
        MessagesRequest:
            type: object
            properties:
                project:
                    type: string
                channel:
                    type: string
                messages:
                    type: array
                    items:
                        $ref: '#/components/schemas/Message'
        MessagesResponse:
            type: object
            properties:
                ids:
                    type: array
                    items:
                        type: string
                    description: ids of the published messages
        MetricSeries:
            type: object
            properties:
                from:
                    type: integer
                    format: int64
                to:
                    type: integer
                    format: int64
                metric:
                    type: string
                scope:
                    type: string
                dataPoints:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataPoint'
            description: Represents series in timeseries based on input query.
        NamespaceInfo:
            type: object
            properties:
                code:
                    type: integer
                    description: The unique namespace code.
                    format: int32
                id:
                    type: string
                    description: The namespace unique id.
                name:
                    type: string
                    description: The namespace display name.
        Page:
            type: object
            properties:
                current:
                    type: integer
                    description: Number representing the current page of results
                    format: int32
                size:
                    type: integer
                    description: Maximum number of results per page
                    format: int32
            description: Pagination metadata for SearchResponse
        PresenceResponse:
            type: object
            properties:
                response:
                    type: string
                    format: byte
        ProjectInfo:
            type: object
            properties:
                project:
                    type: string
                    description: Project name.
                metadata:
                    $ref: '#/components/schemas/ProjectMetadata'
        ProjectMetadata:
            type: object
            properties: {}
        QueryTimeSeriesMetricsRequest:
            type: object
            properties:
                db:
                    type: string
                branch:
                    type: string
                collection:
                    type: string
                from:
                    type: integer
                    format: int64
                to:
                    type: integer
                    format: int64
                metric_name:
                    type: string
                tigris_operation:
                    enum:
                        - ALL
                        - READ
                        - WRITE
                        - METADATA
                    type: string
                    format: enum
                space_aggregation:
                    enum:
                        - AVG
                        - MIN
                        - MAX
                        - SUM
                    type: string
                    format: enum
                space_aggregated_by:
                    type: array
                    items:
                        type: string
                function:
                    enum:
                        - RATE
                        - COUNT
                        - NONE
                    type: string
                    format: enum
                quantile:
                    type: number
                    format: float
                additionalFunctions:
                    type: array
                    items:
                        $ref: '#/components/schemas/AdditionalFunction'
            description: Requests the time series metrics
        QueryTimeSeriesMetricsResponse:
            type: object
            properties:
                from:
                    type: integer
                    format: int64
                to:
                    type: integer
                    format: int64
                query:
                    type: string
                series:
                    type: array
                    items:
                        $ref: '#/components/schemas/MetricSeries'
            description: QueryTimeSeriesMetric responds with this type.
        QuotaLimitsRequest:
            type: object
            properties: {}
            description: Request current namespace quota limits
        QuotaLimitsResponse:
            type: object
            properties:
                ReadUnits:
                    type: integer
                    description: Number of allowed read units per second
                    format: int64
                WriteUnits:
                    type: integer
                    description: Number of allowed write units per second
                    format: int64
                StorageSize:
                    type: integer
                    description: Maximum number of bytes allowed to store
                    format: int64
            description: Contains current quota limits
        QuotaUsageRequest:
            type: object
            properties: {}
            description: Request current namespace quota usage
        QuotaUsageResponse:
            type: object
            properties:
                ReadUnits:
                    type: integer
                    description: Number of read units used per second
                    format: int64
                WriteUnits:
                    type: integer
                    description: Number of write units used per second
                    format: int64
                StorageSize:
                    type: integer
                    description: Number of bytes stored
                    format: int64
                ReadUnitsThrottled:
                    type: integer
                    description: Number of read units throttled per second. Units which was rejected with "resource exhausted error".
                    format: int64
                WriteUnitsThrottled:
                    type: integer
                    description: Number of write units throttled per second. Units which was rejected with "resource exhausted error".
                    format: int64
                StorageSizeThrottled:
                    type: integer
                    description: Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
                    format: int64
            description: Contains current quota usage
        ReadMessagesResponse:
            type: object
            properties:
                message:
                    $ref: '#/components/schemas/Message'
        ReadRequest:
            type: object
            properties:
                filter:
                    type: object
                    description: 'Returns documents matching this filter. A filter can simply be a key, value pair where a key is the field name and the value would be the value for this field. Tigris also allows complex filtering by passing logical expressions. Logical filters are applied on two or more fields using `$or` and `$and`. A few examples of filters: <li> To read a user document where the id has a value 1: ```{"id": 1 }``` <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}` Filter allows setting collation on an individual field level. To set collation for all the fields see options. The detailed documentation of the filter is <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.'
                fields:
                    type: object
                    description: To read specific fields from a document. Default is all.
                options:
                    $ref: '#/components/schemas/ReadRequestOptions'
                sort:
                    type: string
                    description: 'Array of fields and corresponding sort orders to order the results. Ex: 1 `[{ "salary": "$desc" }]`, Ex: 2  `[{ "salary": "$asc"}]`'
                    format: byte
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
        ReadRequestOptions:
            type: object
            properties:
                limit:
                    type: integer
                    description: Limit the number of documents returned by the read operation.
                    format: int64
                skip:
                    type: integer
                    description: Number of documents to skip before starting to return resulting documents.
                    format: int64
                offset:
                    type: string
                    description: A cursor for use in pagination. The next streams will return documents after this offset.
                    format: byte
                collation:
                    $ref: '#/components/schemas/Collation'
            description: Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
        ReadResponse:
            type: object
            properties:
                data:
                    type: object
                    description: Object containing the collection document.
                resume_token:
                    type: string
                    description: An internal key, used for pagination.
                    format: byte
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
        ReplaceRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to be replaced. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/ReplaceRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
        ReplaceRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Additional options for replace requests.
        ReplaceResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: an enum with value set as "replaced"
                keys:
                    type: array
                    items:
                        type: string
                        format: byte
                    description: an array returns the value of the primary keys.
        ResponseMetadata:
            type: object
            properties:
                created_at:
                    type: string
                    description: Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                updated_at:
                    type: string
                    description: Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                deleted_at:
                    type: string
                    description: Time at which the document was deleted. Measured in nano-seconds since the Unix epoch.
                    format: date-time
            description: Has metadata related to the documents stored.
        RollbackTransactionRequest:
            type: object
            properties:
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
            description: Rollback transaction with the given ID
        RollbackTransactionResponse:
            type: object
            properties:
                status:
                    type: string
                    description: Status of rollback transaction operation.
        RollupFunction:
            type: object
            properties:
                aggregator:
                    enum:
                        - ROLLUP_AGGREGATOR_SUM
                        - ROLLUP_AGGREGATOR_COUNT
                        - ROLLUP_AGGREGATOR_MIN
                        - ROLLUP_AGGREGATOR_MAX
                        - ROLLUP_AGGREGATOR_AVG
                    type: string
                    format: enum
                interval:
                    type: integer
                    format: int64
            description: Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
        RotateAppKeyRequest:
            type: object
            properties:
                id:
                    type: string
                    description: app key id
                project:
                    type: string
                    description: project name
            description: Request rotation of an app key secret
        RotateAppKeyResponse:
            type: object
            properties:
                app_key:
                    $ref: '#/components/schemas/AppKey'
            description: RotateAppKeyResponse returns the new app key with rotated secret
        SearchFacet:
            type: object
            properties:
                counts:
                    type: array
                    items:
                        $ref: '#/components/schemas/FacetCount'
                stats:
                    $ref: '#/components/schemas/FacetStats'
        SearchHit:
            type: object
            properties:
                data:
                    type: object
                    description: Actual search document
                metadata:
                    $ref: '#/components/schemas/SearchHitMeta'
        SearchHitMeta:
            type: object
            properties:
                created_at:
                    type: string
                    description: Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                updated_at:
                    type: string
                    description: Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                match:
                    $ref: '#/components/schemas/Match'
            description: Contains metadata related to the search hit, has information about document created_at/updated_at as well.
        SearchIndexRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name whose db is under target to search documents from.
                index:
                    type: string
                    description: The index name to search documents from.
                q:
                    type: string
                    description: Query string for searching across text fields
                search_fields:
                    type: array
                    items:
                        type: string
                    description: Array of fields to project search query against
                filter:
                    type: string
                    description: Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
                    format: byte
                facet:
                    type: string
                    description: 'Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.'
                    format: byte
                sort:
                    type: string
                    description: 'Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`'
                    format: byte
                include_fields:
                    type: array
                    items:
                        type: string
                    description: Array of document field names to include in results. By default, all fields are included.
                exclude_fields:
                    type: array
                    items:
                        type: string
                    description: Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
                page_size:
                    type: integer
                    description: Optionally can set the number of hits to be returned per page, default is 20.
                    format: int32
                page:
                    type: integer
                    description: Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
                    format: int32
                collation:
                    $ref: '#/components/schemas/Collation'
                group_by:
                    type: string
                    description: 'Group by can be used to group search results. For example, to group by city field the syntax would be: `{ "fields": ["city"]}`. Optionally a grouping limit can be set. By default it is 3 per group.'
                    format: byte
                vector:
                    type: string
                    description: 'Vector is an object that is used for vector search. For example, to vector search on a "vec" field the syntax would be: `{ "vec": [0.34, 0.12, 0.95], "top_k": 10}`.'
                    format: byte
        SearchIndexResponse:
            type: object
            properties:
                hits:
                    type: array
                    items:
                        $ref: '#/components/schemas/SearchHit'
                facets:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/SearchFacet'
                meta:
                    $ref: '#/components/schemas/SearchMetadata'
                group:
                    type: array
                    items:
                        $ref: '#/components/schemas/GroupedSearchHits'
                    description: Group is returned when group_by is used in the search request. In this case the above hits will be empty and hits are returned by the group keys.
        SearchMetadata:
            type: object
            properties:
                found:
                    type: integer
                    description: Total number of search results across all pages
                    format: int64
                total_pages:
                    type: integer
                    description: Number representing the total pages of results
                    format: int32
                page:
                    $ref: '#/components/schemas/Page'
                matched_fields:
                    type: array
                    items:
                        type: string
        SearchRequest:
            type: object
            properties:
                q:
                    type: string
                    description: Query string for searching across text fields
                search_fields:
                    type: array
                    items:
                        type: string
                    description: Array of fields to project search query against
                filter:
                    type: object
                    description: Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
                facet:
                    type: object
                    description: 'Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.'
                sort:
                    type: object
                    description: 'Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`'
                include_fields:
                    type: array
                    items:
                        type: string
                    description: Array of document field names to include in results. By default, all fields are included.
                exclude_fields:
                    type: array
                    items:
                        type: string
                    description: Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
                page_size:
                    type: integer
                    description: Optionally can set the number of hits to be returned per page, default is 20.
                    format: int32
                page:
                    type: integer
                    description: Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
                    format: int32
                collation:
                    $ref: '#/components/schemas/Collation'
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
                group_by:
                    type: string
                    description: 'Group by can be used to group search results. For example, to group by city field the syntax would be: `{ "fields": ["city"]}`. Optionally a grouping limit can be set. By default it is 3 per group.'
                    format: byte
                vector:
                    type: string
                    description: 'Vector is an object that is used for vector search. For example, to vector search on a "vec" field the syntax would be: `{ "vec": [0.34, 0.12, 0.95], "top_k": 10}`.'
                    format: byte
                fields:
                    type: object
        SearchResponse:
            type: object
            properties:
                hits:
                    type: array
                    items:
                        $ref: '#/components/schemas/SearchHit'
                facets:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/SearchFacet'
                meta:
                    $ref: '#/components/schemas/SearchMetadata'
            description: Response struct for search
        SetRequest:
            type: object
            properties:
                value:
                    type: string
                    description: free form byte[] value
                    format: byte
                ex:
                    type: integer
                    description: optional - ttl specific to this key in second
                    format: uint64
                px:
                    type: integer
                    description: optional - ttl specific to this key in millisecond
                    format: uint64
                nx:
                    type: boolean
                    description: set only if the key doesn't exist
                xx:
                    type: boolean
                    description: set only if the key exist
        SetResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "set"
        TransactionCtx:
            type: object
            properties:
                id:
                    type: string
                    description: Unique for a single transactional request.
                origin:
                    type: string
                    description: Serves as an internal identifier.
            description: Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
        TransactionOptions:
            type: object
            properties: {}
            description: Options that can be used to modify the transaction semantics.
        UpdateAppKeyRequest:
            type: object
            properties:
                id:
                    type: string
                    description: app key id - this is not allowed to update
                name:
                    type: string
                    description: A new human readable app name
                description:
                    type: string
                    description: A new human readable app description
            description: To update the description of the app key
        UpdateAppKeyResponse:
            type: object
            properties:
                updated_app_key:
                    $ref: '#/components/schemas/AppKey'
            description: Returns response for updating the app key description
        UpdateDocumentRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name whose db is under target to insert documents.
                index:
                    type: string
                    description: Index name where to create documents.
                documents:
                    type: array
                    items:
                        type: string
                        format: byte
                    description: An array of documents. Each document should have "id" present which will be used by Tigris for updating the document.
        UpdateDocumentResponse:
            type: object
            properties:
                status:
                    type: array
                    items:
                        $ref: '#/components/schemas/DocStatus'
                    description: An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
        UpdateNamespaceMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: object
            description: Request update of namespace metadata
        UpdateNamespaceMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: object
            description: Update of namespace metadata response
        UpdateRequest:
            type: object
            properties:
                fields:
                    type: object
                    description: Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
                filter:
                    type: object
                    description: 'Update documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To update a user document where the id has a value 1: ```{"id": 1 }``` <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                options:
                    $ref: '#/components/schemas/UpdateRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a database branch name to perform operation on
        UpdateRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
                collation:
                    $ref: '#/components/schemas/Collation'
                limit:
                    type: integer
                    description: Limit the number of documents to be updated
                    format: int64
            description: Additional options for update requests.
        UpdateResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                modified_count:
                    type: integer
                    description: Returns the number of documents modified.
                    format: int32
                status:
                    type: string
                    description: an enum with value set as "updated".
        UpdateUserMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: object
            description: Request update of user metadata
        UpdateUserMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                userId:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: object
            description: Update of user metadata response
        WriteOptions:
            type: object
            properties: {}
            description: Additional options to modify write requests.
        StreamingReadResponse:
            type: object
            properties:
                result:
                    $ref: '#/components/schemas/ReadResponse'
                error:
                    $ref: '#/components/schemas/Error'
        StreamingSearchResponse:
            type: object
            properties:
                result:
                    $ref: '#/components/schemas/SearchResponse'
                error:
                    $ref: '#/components/schemas/Error'
        Status:
            type: object
            properties:
                error:
                    $ref: '#/components/schemas/Error'
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
security:
    - BearerAuth: []
tags:
    - name: Application Keys
      description: The application keys section provide APIs that can be used to manage application keys for your project. A single project can have one or more application keys.
    - name: Authentication
      description: 'The auth section of API provides OAuth 2.0 APIs. Tigris supports pluggable OAuth provider. Pass the token in the headers for authentication, as an example `-H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6I"`(replace it with your token). All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.'
    - name: Cache
      description: The cache section provide APIs that can be used to perform cache operations.
    - name: Collections
      description: The Collections section provide APIs that can be used to manage collections. A collection can have one or more documents.
    - name: Database
      description: The Database section provide APIs that can be used to interact with the database. A single Database can have one or more collections. A database is created automatically for you when you create a project.
    - name: Management
      description: The Management section provide APIs that can be used to manage users, and app_keys.
    - name: Observability
      description: The Observability section has APIs that provides full visibility into the health, metrics, and monitoring of the Server.
    - name: Projects
      description: Every Tigris projects comes with a transactional document database built on FoundationDB, one of the most resilient and battle-tested open source distributed key-value store. A database is created automatically for you when you create a project.
    - name: Realtime
      description: The realtime section provide APIs that can be used realtime operations.
    - name: Search
      description: The search section provides you APIs that can be used to implement powerful apps with search experiences. You can manage storing documents on your own or you can simply integrate it with your database.
    - name: Search
