# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Tigris API Reference
    description: |4-

        ## Overview
        This section is organized around HTTP APIs. The APIs accepts JSON requests and returns JSON-encoded responses. The APIs conforms to standard HTTP status codes.
    license:
        name: Apache License
        url: https://github.com/tigrisdata/tigris/blob/main/LICENSE
    version: 0.0.1
servers:
    - url: https://api.preview.tigrisdata.cloud
      description: Tigris Cloud
    - url: http://localhost:8081
      description: Localhost
paths:
    /v1/auth/token:
        post:
            tags:
                - Auth
                - Authentication
            summary: Access Token
            description: |-
                Endpoint for receiving access token from Tigris Server. The endpoint requires Grant Type(`grant_type`) which has
                 two possible values <i>"REFRESH_TOKEN"</i> or <i>"CLIENT_CREDENTIALS"</i> based on which either Refresh token(`refresh_token`)
                 needs to be set or client credentials(`client_id`, `client_secret`).
            operationId: Auth_GetAccessToken
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetAccessTokenRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetAccessTokenResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/health:
        get:
            tags:
                - HealthAPI
                - Observability
            summary: Health Check
            description: This endpoint can be used to check the liveness of the server.
            operationId: HealthAPI_Health
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HealthCheckResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/applications/create:
        post:
            tags:
                - Management
                - Management
            summary: Creates the Application
            description: Create an application.
            operationId: Management_CreateApplication
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateApplicationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateApplicationResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/applications/delete:
        delete:
            tags:
                - Management
                - Management
            summary: Deletes the Application
            description: Delete an application.
            operationId: Management_DeleteApplication
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteApplicationsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteApplicationResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/applications/list:
        post:
            tags:
                - Management
                - Management
            summary: List Applications
            description: Lists all application visible to requesting actor.
            operationId: Management_ListApplications
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListApplicationsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListApplicationsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/applications/rotate:
        post:
            tags:
                - Management
                - Management
            summary: Rotates the Application Secret
            description: Endpoint is used to rotate the secret for the application.
            operationId: Management_RotateApplicationSecret
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RotateApplicationSecretRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RotateApplicationSecretResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/applications/update:
        post:
            tags:
                - Management
                - Management
            summary: Updates the Application
            description: Update an application.
            operationId: Management_UpdateApplication
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateApplicationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateApplicationResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespace/metadata/{metadataKey}/get:
        post:
            tags:
                - Management
                - Management
            summary: Reads the Namespace Metadata
            description: GetNamespaceMetadata inserts the user metadata object
            operationId: Management_GetNamespaceMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetNamespaceMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetNamespaceMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespace/metadata/{metadataKey}/insert:
        post:
            tags:
                - Management
                - Management
            summary: Inserts Namespace Metadata
            description: InsertNamespaceMetadata inserts the namespace metadata object
            operationId: Management_InsertNamespaceMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertNamespaceMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertNamespaceMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespace/metadata/{metadataKey}/update:
        post:
            tags:
                - Management
                - Management
            summary: Updates Namespace Metadata
            description: UpdateNamespaceMetadata updates the user metadata object
            operationId: Management_UpdateNamespaceMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateNamespaceMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateNamespaceMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespaces/create:
        post:
            tags:
                - Management
                - Namespaces
            summary: Creates a Namespace
            description: Creates a new namespace, if it does not exist
            operationId: Management_CreateNamespace
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateNamespaceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateNamespaceResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespaces/describe:
        post:
            tags:
                - Management
                - Namespaces
            summary: Describe the details of all namespaces
            description: Get details for all namespaces
            operationId: Management_DescribeNamespaces
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeNamespacesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/namespaces/list:
        post:
            tags:
                - Management
                - Namespaces
            summary: Lists all Namespaces
            description: List all namespace
            operationId: Management_ListNamespaces
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListNamespacesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/users/metadata/{metadataKey}/get:
        post:
            tags:
                - Management
                - Management
            summary: Reads the User Metadata
            description: GetUserMetadata inserts the user metadata object
            operationId: Management_GetUserMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetUserMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetUserMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/users/metadata/{metadataKey}/insert:
        post:
            tags:
                - Management
                - Management
            summary: Inserts User Metadata
            description: insertUserMetadata inserts the user metadata object
            operationId: Management_InsertUserMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertUserMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertUserMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/management/users/metadata/{metadataKey}/update:
        post:
            tags:
                - Management
                - Management
            summary: Updates User Metadata
            description: updateUserMetadata updates the user metadata object
            operationId: Management_UpdateUserMetadata
            parameters:
                - name: metadataKey
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateUserMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/observability/info:
        get:
            tags:
                - Observability
                - Observability
            summary: Information about the server
            description: Provides the information about the server. This information includes returning the server version, etc.
            operationId: Observability_GetInfo
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetInfoResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/observability/metrics/timeseries/query:
        post:
            tags:
                - Observability
                - Observability
            summary: Queries time series metrics
            description: Queries time series metrics
            operationId: Observability_QueryTimeSeriesMetrics
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QueryTimeSeriesMetricsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/QueryTimeSeriesMetricsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/observability/quota/limits:
        post:
            tags:
                - Observability
                - Observability
            summary: Queries current namespace quota limits
            description: Returns current namespace quota limits
            operationId: Observability_QuotaLimits
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QuotaLimitsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/QuotaLimitsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/observability/quota/usage:
        post:
            tags:
                - Observability
                - Observability
            summary: Queries current namespace quota usage
            description: Returns current namespace quota limits
            operationId: Observability_QuotaUsage
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QuotaUsageRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/QuotaUsageResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/list:
        post:
            tags:
                - Tigris
                - Projects
            summary: List Projects
            description: List returns all the projects.
            operationId: Tigris_ListProjects
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListProjectsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/list:
        post:
            tags:
                - Tigris
                - Projects
            summary: List Collections
            description: List all the collections present in the project passed in the request.
            operationId: Tigris_ListCollections
            parameters:
                - name: project
                  in: path
                  description: List collection in this project.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListCollectionsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListCollectionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/createOrUpdate:
        post:
            tags:
                - Tigris
                - Collections
            summary: Create or update a collection
            description: |-
                Creates a new collection or atomically upgrades the collection to the new schema provided in the request.
                 Schema changes are applied atomically and immediately without any downtime.
                 Tigris Offers two types of collections: <p></p>
                    <li> `DOCUMENTS`: Offers rich CRUD APIs.
                    <li> `MESSAGES`: Offers event streaming APIs.
            operationId: Tigris_CreateOrUpdateCollection
            parameters:
                - name: project
                  in: path
                  description: Project name where to create collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to create.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateOrUpdateCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateOrUpdateCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/describe:
        post:
            tags:
                - Tigris
                - Collections
            summary: Describe Collection
            description: Returns the information related to the collection. This can be used to retrieve the schema or size of the collection.
            operationId: Tigris_DescribeCollection
            parameters:
                - name: project
                  in: path
                  description: Name of the project.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Name of the collection.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DescribeCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/documents/delete:
        delete:
            tags:
                - Tigris
                - Documents
            summary: Delete Documents
            description: Delete a range of documents in the collection using the condition provided in the filter.
            operationId: Tigris_Delete
            parameters:
                - name: project
                  in: path
                  description: Project name where to insert documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/documents/insert:
        post:
            tags:
                - Tigris
                - Documents
            summary: Insert Documents
            description: |-
                Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
                 in the request already exists. Insert provides idempotency by returning an error if the document
                 already exists. To replace documents, use REPLACE API instead of INSERT.
            operationId: Tigris_Insert
            parameters:
                - name: project
                  in: path
                  description: Project name where to insert documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/documents/read:
        post:
            tags:
                - Tigris
                - Documents
            summary: Read Documents
            description: |-
                Reads a range of documents from the collection, or messages from a collection in case of event streaming. Tigris does not require you to
                 index any fields and automatically index all the fields which means you can filter by any field in the document.
                 An empty filter will trigger reading all the documents inside this collection. The API supports pagination that
                 can be used by passing `Limit/Skip` parameters. The `skip` parameter skips the number of documents from the start and
                 the `limit` parameter is used to specify the number of documents to read. You can find more detailed documentation
                 of the Read API <a href="https://docs.tigrisdata.com/overview/query" title="here">here</a>.
            operationId: Tigris_Read
            parameters:
                - name: project
                  in: path
                  description: Project name to read documents from.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to read documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReadRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/documents/replace:
        put:
            tags:
                - Tigris
                - Documents
            summary: Insert or Replace Documents
            description: Inserts the documents or replaces the existing documents in the collections.
            operationId: Tigris_Replace
            parameters:
                - name: project
                  in: path
                  description: Project name where to replace documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to replace documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReplaceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReplaceResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/documents/search:
        post:
            tags:
                - Tigris
                - Documents
            summary: Search Documents.
            description: |-
                Searches a collection for the documents matching the query, or messages in case of event streaming. A search can be
                 a term search or a phrase search. Search API allows filtering the result set using filters as documented <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.
                 You can also perform a faceted search by passing the fields in the facet parameter.
                 You can find more detailed documentation of the Search API with multiple examples <a href="https://docs.tigrisdata.com/overview/search" title="here">here</a>.
            operationId: Tigris_Search
            parameters:
                - name: project
                  in: path
                  description: Project name to read documents from.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to read documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/documents/update:
        put:
            tags:
                - Tigris
                - Documents
            summary: Update Documents
            description: Update a range of documents in the collection using the condition provided in the filter.
            operationId: Tigris_Update
            parameters:
                - name: project
                  in: path
                  description: Project name where to update documents
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to update documents
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/collections/{collection}/drop:
        delete:
            tags:
                - Tigris
                - Collections
            summary: Drop Collection
            description: Drop the collection inside this project. This API deletes all of the documents inside this collection and any metadata associated with it.
            operationId: Tigris_DropCollection
            parameters:
                - name: project
                  in: path
                  description: Project name of the collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to drop.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DropCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DropCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/create:
        post:
            tags:
                - Tigris
                - Projects
            summary: Create Project
            description: Creates a new project. Returns an AlreadyExists error with a status code 409 if the project already exists.
            operationId: Tigris_CreateProject
            parameters:
                - name: project
                  in: path
                  description: Create project with this name.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateProjectRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateProjectResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/describe:
        post:
            tags:
                - Tigris
                - Projects
            summary: Describe Project
            description: |-
                This API returns information related to the project along with all the collections inside the project.
                 This can be used to retrieve the size of the project or to retrieve schemas and the size of all the collections present in this project.
            operationId: Tigris_DescribeProject
            parameters:
                - name: project
                  in: path
                  description: Name of the project.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DescribeProjectRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeProjectResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/drop:
        delete:
            tags:
                - Tigris
                - Projects
            summary: Delete Project
            description: Delete Project deletes all the collections in this project along with all of the documents, and associated metadata for these collections.
            operationId: Tigris_DeleteProject
            parameters:
                - name: project
                  in: path
                  description: 'Delete Project with this name. **Note**: Deletes all the collections in the project. Use with caution.'
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteProjectRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteProjectResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/transactions/begin:
        post:
            tags:
                - Tigris
                - Transactions
            summary: Begin a transaction
            description: |-
                Starts a new transaction and returns a transactional object. All reads/writes performed
                 within a transaction will run with serializable isolation.
            operationId: Tigris_BeginTransaction
            parameters:
                - name: project
                  in: path
                  description: Project name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeginTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeginTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/transactions/commit:
        post:
            tags:
                - Tigris
                - Transactions
            summary: Commit a Transaction
            description: |-
                Atomically commit all the changes performed in the context of the transaction. Commit provides all
                 or nothing semantics by ensuring no partial updates are in the project due to a transaction failure.
            operationId: Tigris_CommitTransaction
            parameters:
                - name: project
                  in: path
                  description: Project name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CommitTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CommitTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/transactions/rollback:
        post:
            tags:
                - Tigris
                - Transactions
            summary: Rollback a transaction
            description: |-
                Rollback transaction discards all the changes
                 performed in the transaction
            operationId: Tigris_RollbackTransaction
            parameters:
                - name: project
                  in: path
                  description: Project name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RollbackTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RollbackTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        AdditionalFunction:
            type: object
            properties:
                rollup:
                    $ref: '#/components/schemas/RollupFunction'
            description: Additional function to apply on metrics query
        Application:
            type: object
            properties:
                id:
                    type: string
                    description: Generated client id
                name:
                    type: string
                    description: A human readable app name
                description:
                    type: string
                    description: A human readable app description
                secret:
                    type: string
                    description: Generated app secret
                created_at:
                    type: integer
                    description: Created at
                    format: int64
                created_by:
                    type: string
                    description: Created by
                updated_at:
                    type: integer
                    description: Updated at
                    format: int64
                updated_by:
                    type: string
                    description: Updated by
                projects:
                    type: array
                    items:
                        type: string
                    description: Project(s) it belongs to (for backward compatibility - multiple projects)
            description: An user application
        BeginTransactionRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name this transaction belongs to.
                options:
                    $ref: '#/components/schemas/TransactionOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
            description: Start new transaction in project specified by "project".
        BeginTransactionResponse:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Start transaction returns transaction context  which uniquely identifies the transaction
        Collation:
            type: object
            properties:
                case:
                    type: string
            description: A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
        CollectionDescription:
            type: object
            properties:
                collection:
                    type: string
                    description: Name of the collection.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
                schema:
                    type: string
                    description: Collections schema
                    format: bytes
                size:
                    type: integer
                    description: Collection size in bytes
                    format: int64
        CollectionInfo:
            type: object
            properties:
                collection:
                    type: string
                    description: Collection name.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
        CollectionMetadata:
            type: object
            properties: {}
        CollectionOptions:
            type: object
            properties: {}
            description: Collection requests modifying options.
        CommitTransactionRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name this transaction belongs to.
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
            description: Commit transaction with the given ID
        CommitTransactionResponse:
            type: object
            properties:
                status:
                    type: string
                    description: Status of commit transaction operation.
        CreateApplicationRequest:
            type: object
            properties:
                name:
                    type: string
                    description: A human readable app name
                description:
                    type: string
                    description: A human readable app description
                project:
                    type: string
                    description: Project name
            description: Request creation of user application
        CreateApplicationResponse:
            type: object
            properties:
                created_application:
                    $ref: '#/components/schemas/Application'
            description: CreateApplication returns created application
        CreateNamespaceRequest:
            type: object
            properties:
                code:
                    type: integer
                    description: 'Optional: unique id'
                    format: uint32
                id:
                    type: string
                    description: 'Optional: unique string id'
                name:
                    type: string
                    description: 'Required: The display name for namespace.'
        CreateNamespaceResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created".
                namespace:
                    $ref: '#/components/schemas/NamespaceInfo'
        CreateOrUpdateCollectionRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name where to create collection.
                collection:
                    type: string
                    description: Collection name to create.
                schema:
                    type: string
                    description: 'The schema specifications are same as JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>. The schema of the `documents` collection differs from the schema of `topic` collection as `topic` collection does not have any concept of `primary_key`. The server recognizes type of the collection by the `collection_type` set in the schema.<p></p> Schema example of `documents`: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 100    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }` <p></p>*Note: The `collection_type` is not set as default is documents.* <p></p>Schema example of `topic`: `{  "title": "user_events",  "description": "Topic for user events",  "properties": {    "event_id": {      "description": "A id for the event",      "type": "integer"    },    "event_type": {      "description": "Type of the Event",      "type": "string",      "maxLength": 100    }    "event_details": {      "description": "Details about the Event",      "type": "string"    }  },  "collection_type": "topic" }` <p></p> *Note: The `collection_type` is set as "topic".*'
                    format: bytes
                only_create:
                    type: boolean
                    description: If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        CreateOrUpdateCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created" or "updated"
        CreateProjectRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Create project with this name.
                options:
                    $ref: '#/components/schemas/ProjectOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        CreateProjectResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created".
        DataPoint:
            type: object
            properties:
                timestamp:
                    type: integer
                    format: int64
                value:
                    type: number
                    format: double
            description: Represents the data point in timeseries.
        DeleteApplicationResponse:
            type: object
            properties:
                deleted:
                    type: boolean
                    description: status flag for delete operation
            description: DeleteApplication returns the flag to convey if application was deleted
        DeleteApplicationsRequest:
            type: object
            properties:
                id:
                    type: string
                    description: application id
            description: Request deletion of an application
        DeleteProjectRequest:
            type: object
            properties:
                project:
                    type: string
                    description: 'Delete Project with this name. **Note**: Deletes all the collections in the project. Use with caution.'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        DeleteProjectResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "dropped".
        DeleteRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name where to insert documents.
                collection:
                    type: string
                    description: Collection name where to insert documents.
                filter:
                    type: string
                    description: 'Delete documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To delete a user document where the id has a value 1: ```{"id": 1 }``` <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                    format: bytes
                options:
                    $ref: '#/components/schemas/DeleteRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        DeleteRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
                collation:
                    $ref: '#/components/schemas/Collation'
                limit:
                    type: integer
                    description: Limit the number of documents to be deleted
                    format: int64
            description: Additional options for deleted requests.
        DeleteResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: an enum with value set as "deleted"
        DescribeCollectionRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Name of the project.
                collection:
                    type: string
                    description: Name of the collection.
                schema_format:
                    type: string
                    description: Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        DescribeCollectionResponse:
            type: object
            properties:
                collection:
                    type: string
                    description: Name of the collection.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
                schema:
                    type: string
                    description: Schema of this collection.
                    format: bytes
                size:
                    type: integer
                    description: The size of this collection in bytes.
                    format: int64
            description: A detailed description of the collection. The description returns collection metadata and the schema.
        DescribeNamespacesData:
            type: object
            properties:
                details:
                    type: string
        DescribeNamespacesResponse:
            type: object
            properties:
                data:
                    $ref: '#/components/schemas/DescribeNamespacesData'
        DescribeProjectRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Name of the project.
                schema_format:
                    type: string
                    description: Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        DescribeProjectResponse:
            type: object
            properties:
                project:
                    type: string
                    description: Name of the project.
                metadata:
                    $ref: '#/components/schemas/ProjectMetadata'
                collections:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionDescription'
                    description: A detailed description about all the collections. The description returns collection metadata and the schema.
                size:
                    type: integer
                    description: Sum of all the collections sizes present in this project
                    format: int64
                branches:
                    type: array
                    items:
                        type: string
                    description: List of all the branches in this project
            description: A detailed description of the project and all the associated collections. Description of the collection includes schema details as well.
        DropCollectionRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name of the collection.
                collection:
                    type: string
                    description: Collection name to drop.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        DropCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "dropped".
        Error:
            type: object
            properties:
                code:
                    enum:
                        - OK
                        - CANCELLED
                        - UNKNOWN
                        - INVALID_ARGUMENT
                        - DEADLINE_EXCEEDED
                        - NOT_FOUND
                        - ALREADY_EXISTS
                        - PERMISSION_DENIED
                        - RESOURCE_EXHAUSTED
                        - FAILED_PRECONDITION
                        - ABORTED
                        - OUT_OF_RANGE
                        - UNIMPLEMENTED
                        - INTERNAL
                        - UNAVAILABLE
                        - DATA_LOSS
                        - UNAUTHENTICATED
                        - CONFLICT
                        - BAD_GATEWAY
                        - METHOD_NOT_ALLOWED
                    type: string
                    description: The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
                    format: enum
                message:
                    type: string
                    description: A developer-facing descriptive error message
            description: The Error type defines a logical error model
        FacetCount:
            type: object
            properties:
                count:
                    type: integer
                    format: int64
                value:
                    type: string
        FacetStats:
            type: object
            properties:
                avg:
                    type: number
                    description: Average of all values in a field. Only available for numeric fields
                    format: double
                max:
                    type: number
                    description: Maximum of all values in a field. Only available for numeric fields
                    format: double
                min:
                    type: number
                    description: Minimum of all values in a field. Only available for numeric fields
                    format: double
                sum:
                    type: number
                    description: Sum of all values in a field. Only available for numeric fields
                    format: double
                count:
                    type: integer
                    description: Total number of values in a field
                    format: int64
            description: Additional stats for faceted field
        GetAccessTokenRequest:
            type: object
            properties:
                grant_type:
                    enum:
                        - REFRESH_TOKEN
                        - CLIENT_CREDENTIALS
                    type: string
                    format: enum
                refresh_token:
                    type: string
                    description: Refresh token is required when grant type is set as `REFRESH_TOKEN`.
                client_id:
                    type: string
                    description: Client Id is required when grant type is set as `CLIENT_CREDENTIALS`.
                client_secret:
                    type: string
                    description: Your Tigris API Key is required when grant type is set as `CLIENT_CREDENTIALS`.
            description: The Request message for the GetAccessToken. The grant type is a required field and based on the grant type the other fields are used as mentioned below.
        GetAccessTokenResponse:
            type: object
            properties:
                access_token:
                    type: string
                    description: An Access Token.
                refresh_token:
                    type: string
                    description: The Refresh Token.
                expires_in:
                    type: integer
                    description: Access token expiration timeout in seconds.
                    format: int32
            description: The response of GetAccessToken which contains access_token and optionally refresh_token.
        GetInfoResponse:
            type: object
            properties:
                server_version:
                    type: string
                error:
                    $ref: '#/components/schemas/Error'
        GetNamespaceMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
            description: Request namespace metadata
        GetNamespaceMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: string
                    format: bytes
            description: Namespace metadata response
        GetUserMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
            description: Request user metadata
        GetUserMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                userId:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: string
                    format: bytes
            description: User metadata response
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        HealthCheckResponse:
            type: object
            properties:
                response:
                    type: string
        InsertNamespaceMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: string
                    format: bytes
            description: Request insertion of namespace metadata
        InsertNamespaceMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: string
                    format: bytes
            description: Insertion of namespace metadata response
        InsertRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name where to insert documents.
                collection:
                    type: string
                    description: Collection name where to insert documents.
                documents:
                    type: array
                    items:
                        type: string
                        format: bytes
                    description: Array of documents to insert. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/InsertRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        InsertRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: additional options for insert requests.
        InsertResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: An enum with value set as "inserted"
                keys:
                    type: array
                    items:
                        type: string
                        format: bytes
                    description: an array returns the value of the primary keys.
        InsertUserMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: string
                    format: bytes
            description: Request insertion of user metadata
        InsertUserMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                userId:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: string
                    format: bytes
            description: Insertion of user metadata response
        ListApplicationsRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name filter
            description: Request listing of all the application those are visible to requesting actor
        ListApplicationsResponse:
            type: object
            properties:
                applications:
                    type: array
                    items:
                        $ref: '#/components/schemas/Application'
            description: ListApplication returns one or more visible application to user
        ListCollectionsRequest:
            type: object
            properties:
                project:
                    type: string
                    description: List collection in this project.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        ListCollectionsResponse:
            type: object
            properties:
                project:
                    type: string
                    description: Name of the project.
                collections:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionInfo'
                    description: List of the collections info in the project.
        ListNamespacesResponse:
            type: object
            properties:
                namespaces:
                    type: array
                    items:
                        $ref: '#/components/schemas/NamespaceInfo'
        ListProjectsResponse:
            type: object
            properties:
                projects:
                    type: array
                    items:
                        $ref: '#/components/schemas/ProjectInfo'
                    description: List of the projects.
        MetricSeries:
            type: object
            properties:
                from:
                    type: integer
                    format: int64
                to:
                    type: integer
                    format: int64
                metric:
                    type: string
                scope:
                    type: string
                dataPoints:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataPoint'
            description: Represents series in timeseries based on input query.
        NamespaceInfo:
            type: object
            properties:
                code:
                    type: integer
                    description: The unique namespace code.
                    format: int32
                id:
                    type: string
                    description: The namespace unique id.
                name:
                    type: string
                    description: The namespace display name.
        Page:
            type: object
            properties:
                current:
                    type: integer
                    description: Number representing the current page of results
                    format: int32
                size:
                    type: integer
                    description: Maximum number of results per page
                    format: int32
            description: Pagination metadata for SearchResponse
        ProjectInfo:
            type: object
            properties:
                project:
                    type: string
                    description: Project name.
                metadata:
                    $ref: '#/components/schemas/ProjectMetadata'
        ProjectMetadata:
            type: object
            properties: {}
        ProjectOptions:
            type: object
            properties: {}
            description: Project requests modifying options.
        QueryTimeSeriesMetricsRequest:
            type: object
            properties:
                db:
                    type: string
                collection:
                    type: string
                from:
                    type: integer
                    format: int64
                to:
                    type: integer
                    format: int64
                metric_name:
                    type: string
                tigris_operation:
                    enum:
                        - ALL
                        - READ
                        - WRITE
                        - METADATA
                    type: string
                    format: enum
                space_aggregation:
                    enum:
                        - AVG
                        - MIN
                        - MAX
                        - SUM
                    type: string
                    format: enum
                space_aggregated_by:
                    type: array
                    items:
                        type: string
                function:
                    enum:
                        - RATE
                        - COUNT
                        - NONE
                    type: string
                    format: enum
                quantile:
                    type: number
                    format: float
                additionalFunctions:
                    type: array
                    items:
                        $ref: '#/components/schemas/AdditionalFunction'
            description: Requests the time series metrics
        QueryTimeSeriesMetricsResponse:
            type: object
            properties:
                from:
                    type: integer
                    format: int64
                to:
                    type: integer
                    format: int64
                query:
                    type: string
                series:
                    type: array
                    items:
                        $ref: '#/components/schemas/MetricSeries'
            description: QueryTimeSeriesMetric responds with this type.
        QuotaLimitsRequest:
            type: object
            properties: {}
            description: Request current namespace quota limits
        QuotaLimitsResponse:
            type: object
            properties:
                ReadUnits:
                    type: integer
                    description: Number of allowed read units per second
                    format: int64
                WriteUnits:
                    type: integer
                    description: Number of allowed write units per second
                    format: int64
                StorageSize:
                    type: integer
                    description: Maximum number of bytes allowed to store
                    format: int64
            description: Contains current quota limits
        QuotaUsageRequest:
            type: object
            properties: {}
            description: Request current namespace quota usage
        QuotaUsageResponse:
            type: object
            properties:
                ReadUnits:
                    type: integer
                    description: Number of read units used per second
                    format: int64
                WriteUnits:
                    type: integer
                    description: Number of write units used per second
                    format: int64
                StorageSize:
                    type: integer
                    description: Number of bytes stored
                    format: int64
                ReadUnitsThrottled:
                    type: integer
                    description: Number of read units throttled per second. Units which was rejected with "resource exhausted error".
                    format: int64
                WriteUnitsThrottled:
                    type: integer
                    description: Number of write units throttled per second. Units which was rejected with "resource exhausted error".
                    format: int64
                StorageSizeThrottled:
                    type: integer
                    description: Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
                    format: int64
            description: Contains current quota usage
        ReadRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name to read documents from.
                collection:
                    type: string
                    description: Collection name to read documents from.
                filter:
                    type: string
                    description: 'Returns documents matching this filter. A filter can simply be a key, value pair where a key is the field name and the value would be the value for this field. Tigris also allows complex filtering by passing logical expressions. Logical filters are applied on two or more fields using `$or` and `$and`. A few examples of filters: <li> To read a user document where the id has a value 1: ```{"id": 1 }``` <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}` Filter allows setting collation on an individual field level. To set collation for all the fields see options. The detailed documentation of the filter is <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.'
                    format: bytes
                fields:
                    type: string
                    description: To read specific fields from a document. Default is all.
                    format: bytes
                options:
                    $ref: '#/components/schemas/ReadRequestOptions'
                sort:
                    type: string
                    description: 'Array of fields and corresponding sort orders to order the results. Ex: 1 `[{ "salary": "$desc" }]`, Ex: 2  `[{ "salary": "$asc"}]`'
                    format: bytes
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        ReadRequestOptions:
            type: object
            properties:
                limit:
                    type: integer
                    description: Limit the number of documents returned by the read operation.
                    format: int64
                skip:
                    type: integer
                    description: Number of documents to skip before starting to return resulting documents.
                    format: int64
                offset:
                    type: string
                    description: A cursor for use in pagination. The next streams will return documents after this offset.
                    format: bytes
                collation:
                    $ref: '#/components/schemas/Collation'
            description: Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
        ReadResponse:
            type: object
            properties:
                data:
                    type: string
                    description: Object containing the collection document.
                    format: bytes
                resume_token:
                    type: string
                    description: An internal key, used for pagination.
                    format: bytes
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
        ReplaceRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name where to replace documents.
                collection:
                    type: string
                    description: Collection name where to replace documents.
                documents:
                    type: array
                    items:
                        type: string
                        format: bytes
                    description: Array of documents to be replaced. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/ReplaceRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        ReplaceRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Additional options for replace requests.
        ReplaceResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: an enum with value set as "replaced"
                keys:
                    type: array
                    items:
                        type: string
                        format: bytes
                    description: an array returns the value of the primary keys.
        ResponseMetadata:
            type: object
            properties:
                created_at:
                    type: string
                    description: Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                updated_at:
                    type: string
                    description: Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                deleted_at:
                    type: string
                    description: Time at which the document was deleted. Measured in nano-seconds since the Unix epoch.
                    format: date-time
            description: Has metadata related to the documents stored.
        RollbackTransactionRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name this transaction belongs to.
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
            description: Rollback transaction with the given ID
        RollbackTransactionResponse:
            type: object
            properties:
                status:
                    type: string
                    description: Status of rollback transaction operation.
        RollupFunction:
            type: object
            properties:
                aggregator:
                    enum:
                        - ROLLUP_AGGREGATOR_SUM
                        - ROLLUP_AGGREGATOR_COUNT
                        - ROLLUP_AGGREGATOR_MIN
                        - ROLLUP_AGGREGATOR_MAX
                        - ROLLUP_AGGREGATOR_AVG
                    type: string
                    format: enum
                interval:
                    type: integer
                    format: int64
            description: Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
        RotateApplicationSecretRequest:
            type: object
            properties:
                id:
                    type: string
                    description: application id
            description: Request rotation of an application secret
        RotateApplicationSecretResponse:
            type: object
            properties:
                application:
                    $ref: '#/components/schemas/Application'
            description: RotateApplicationRequest returns the new application with rotated secret
        SearchFacet:
            type: object
            properties:
                counts:
                    type: array
                    items:
                        $ref: '#/components/schemas/FacetCount'
                stats:
                    $ref: '#/components/schemas/FacetStats'
        SearchHit:
            type: object
            properties:
                data:
                    type: string
                    description: Actual search document
                    format: bytes
                metadata:
                    $ref: '#/components/schemas/SearchHitMeta'
        SearchHitMeta:
            type: object
            properties:
                created_at:
                    type: string
                    description: Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                updated_at:
                    type: string
                    description: Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
                    format: date-time
            description: Contains metadata related to the search hit, has information about document created_at/updated_at as well.
        SearchMetadata:
            type: object
            properties:
                found:
                    type: integer
                    description: Total number of search results across all pages
                    format: int64
                total_pages:
                    type: integer
                    description: Number representing the total pages of results
                    format: int32
                page:
                    $ref: '#/components/schemas/Page'
        SearchRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name to read documents from.
                collection:
                    type: string
                    description: Collection name to read documents from.
                q:
                    type: string
                    description: Query string for searching across text fields
                search_fields:
                    type: array
                    items:
                        type: string
                    description: Array of fields to project search query against
                filter:
                    type: string
                    description: Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
                    format: bytes
                facet:
                    type: string
                    description: 'Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.'
                    format: bytes
                sort:
                    type: string
                    description: 'Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`'
                    format: bytes
                include_fields:
                    type: array
                    items:
                        type: string
                    description: Array of document field names to include in results. By default, all fields are included.
                exclude_fields:
                    type: array
                    items:
                        type: string
                    description: Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
                page_size:
                    type: integer
                    description: Optionally can set the number of hits to be returned per page, default is 20.
                    format: int32
                page:
                    type: integer
                    description: Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
                    format: int32
                collation:
                    $ref: '#/components/schemas/Collation'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        SearchResponse:
            type: object
            properties:
                hits:
                    type: array
                    items:
                        $ref: '#/components/schemas/SearchHit'
                facets:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/SearchFacet'
                meta:
                    $ref: '#/components/schemas/SearchMetadata'
            description: Response struct for search
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        TransactionCtx:
            type: object
            properties:
                id:
                    type: string
                    description: Unique for a single transactional request.
                origin:
                    type: string
                    description: Serves as an internal identifier.
            description: Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
        TransactionOptions:
            type: object
            properties: {}
            description: Options that can be used to modify the transaction semantics.
        UpdateApplicationRequest:
            type: object
            properties:
                id:
                    type: string
                    description: application id
                name:
                    type: string
                    description: A new human readable app name
                description:
                    type: string
                    description: A new human readable app description
            description: Request creation of user application
        UpdateApplicationResponse:
            type: object
            properties:
                updated_application:
                    $ref: '#/components/schemas/Application'
            description: CreateApplication returns created application
        UpdateNamespaceMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: string
                    format: bytes
            description: Request update of namespace metadata
        UpdateNamespaceMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: string
                    format: bytes
            description: Update of namespace metadata response
        UpdateRequest:
            type: object
            properties:
                project:
                    type: string
                    description: Project name where to update documents
                collection:
                    type: string
                    description: Collection name where to update documents
                fields:
                    type: string
                    description: Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
                    format: bytes
                filter:
                    type: string
                    description: 'Update documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To update a user document where the id has a value 1: ```{"id": 1 }``` <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                    format: bytes
                options:
                    $ref: '#/components/schemas/UpdateRequestOptions'
                branch:
                    type: string
                    description: Optionally specify a project branch name to perform operation on
        UpdateRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
                collation:
                    $ref: '#/components/schemas/Collation'
                limit:
                    type: integer
                    description: Limit the number of documents to be updated
                    format: int64
            description: Additional options for update requests.
        UpdateResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                modified_count:
                    type: integer
                    description: Returns the number of documents modified.
                    format: int32
                status:
                    type: string
                    description: an enum with value set as "updated".
        UpdateUserMetadataRequest:
            type: object
            properties:
                metadataKey:
                    type: string
                value:
                    type: string
                    format: bytes
            description: Request update of user metadata
        UpdateUserMetadataResponse:
            type: object
            properties:
                metadataKey:
                    type: string
                userId:
                    type: string
                namespaceId:
                    type: integer
                    format: uint32
                value:
                    type: string
                    format: bytes
            description: Update of user metadata response
        WriteOptions:
            type: object
            properties: {}
            description: Additional options to modify write requests.
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
security:
    - BearerAuth: []
tags:
    - name: Auth
    - name: Authentication
      description: 'The auth section of API provides open authorization (OAuth 2.0) APIs. Tigris supports pluggable OAuth provider. Pass the token in the headers for authentication, as an example `-H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6I"`(replace it with your token). All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.'
    - name: Collections
      description: The Collections section provide APIs that can be used to manage collections. A collection can have one or more documents.
    - name: Documents
      description: The Documents section provide APIs to manage documents insides a collection. Uniqueness of documents are enforced by the primary key.
    - name: Event Streaming
      description: Tigris has built-in event streaming support. This functionality is enabled for the `Messages` collection type. This type of collection is referred as Topic and has endpoints that allows you to both subscribe and publish to a topic which enable building event-driven applications. Ordering is guaranteed on a partition level
    - name: HealthAPI
    - name: Management
      description: The Management section provide APIs that can be used to manage users, and applications.
    - name: Management
    - name: Namespaces
      description: The Namespaces section provide APIs that can be used to manage namespaces. A single namespace can have one or more projects.
    - name: Observability
      description: The Observability section has APIs that provides full visibility into the health, metrics, and monitoring of the Server.
    - name: Observability
    - name: Projects
      description: The Projects section provide APIs that can be used to manage Tigris projects. A single project can have one or more collections.
    - name: Tigris
    - name: Transactions
      description: Transactional APIs are used to control the state of the transaction by explicitly starting a transaction and ending it using the commit/rollback endpoint. All operations performed in a transaction acts as a single unit. Tigris offers global transactions, with ACID properties and strict serializability.
