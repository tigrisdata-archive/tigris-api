// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.auth.v1;

import "google/api/annotations.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";


// The Request message for the GetAccessToken. The grant type is a required field and based on the grant type
// the other fields are used as mentioned below.
message GetAccessTokenRequest{
  GrantType grant_type = 1;
  // Refresh token is required when grant type is set as `REFRESH_TOKEN`.
  string refresh_token = 2;
  // Client Id is required when grant type is set as `CLIENT_CREDENTIALS`.
  string client_id = 3;
  // Your Tigris API Key is required when grant type is set as `CLIENT_CREDENTIALS`.
  string client_secret = 4;
}

enum GrantType{
  REFRESH_TOKEN = 0;
  CLIENT_CREDENTIALS = 1;
}

// The response of GetAccessToken which contains access_token and optionally refresh_token.
message GetAccessTokenResponse{
  // An Access Token.
  string access_token = 1;
  // The Refresh Token.
  string refresh_token = 2;
  // Access token expiration timeout in seconds.
  int32 expires_in = 3;
}

service Auth {
  // Endpoint for receiving access token from Tigris Server. The endpoint requires Grant Type(`grant_type`) which has
  // two possible values <i>"REFRESH_TOKEN"</i> or <i>"CLIENT_CREDENTIALS"</i> based on which either Refresh token(`refresh_token`)
  // needs to be set or client credentials(`client_id`, `client_secret`).
  rpc GetAccessToken(GetAccessTokenRequest) returns
      (GetAccessTokenResponse) {
    option (google.api.http) = {
      post : "/v1/auth/token"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Access Token"
      tags: "Authentication"
    };
  }
}
