// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.auth.v1;

import "google/api/annotations.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";


option (openapi.v3.document) = {
  info: {
    title: "Authorization API Reference"
    version: "0.0.1"
    description: "\n## Overview\nThis section is organized around Tigris authorization HTTP APIs. The APIs accepts JSON requests and returns JSON-encoded responses. The APIs conforms to standard HTTP status codes."
    license: {
      name: "Apache License"
      url: "https://github.com/tigrisdata/tigris/blob/main/LICENSE"
    }
  }
  tags: [{
    name: "auth"
    description: "Tigris supports pluggable oauth provider. The auth section of API provides open authorization (OAuth 2.0) APIs"
  },
    {
      name: "application"
      description: "Tigris supports application based authentication. This section provides API to manage user applications"
    }]
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
            }
          }
        }
      ]
    }
  }
};

// Requests the access token by specifying
// grant_type:refresh_token & refresh_token
// or
// grant_type:client_credentials & [client_id, client_secret]
message GetAccessTokenRequest{
  GrantType grant_type = 1;
  // case: refresh_token: A valid refresh token
  string refresh_token = 2;

  // case: client_credentials: A valid credentials (client_id, client_secret,
  // audience)
  string client_id = 3;
  string client_secret = 4;
}

enum GrantType{
  REFRESH_TOKEN = 0;
  CLIENT_CREDENTIALS = 1;
}

// GetAccessToken returns response containing access_token and optionally
// refresh_token
message GetAccessTokenResponse{
  // An access token.
  string access_token = 1;
  // Refresh token.
  string refresh_token = 2;
}

// Request creation of user application
message CreateApplicationRequest {
  // A human readable app name
  string name = 1;
  // A human readable app description
  string description = 2;
}

// CreateApplication returns created application
message CreateApplicationResponse {
  Application created_application = 1;
}

// An user application
message Application {
  // Generated client id
  string id = 1;
  // A human readable app name
  string name = 2;
  // A human readable app description
  string description = 3;
  // Generated app secret
  string secret = 4;
  // Created at
  int64 created_at = 5;
  // Created by
  string created_by = 6;
}

// Request listing of all the application those are visible to requesting actor
message ListApplicationsRequest {
}

// ListApplication returns one or more visible application to user
message ListApplicationsResponse {
  repeated Application applications = 1;
}

// Request deletion of an application
message DeleteApplicationsRequest {
  string id = 1;
}

// DeleteApplication returns the flag to convey if application was deleted
message DeleteApplicationResponse{
  bool deleted = 1;
}

// Request rotation of an application secret
message RotateApplicationSecretRequest {
  string id = 1;
}

// RotateApplicationRequest returns the new application with rotated secret
message RotateApplicationSecretResponse{
  Application application = 1;
}

service Auth {
  // Gets an access token.
  // supports two grant_type: [refresh_token, client_credentials]
  rpc getAccessToken(GetAccessTokenRequest) returns
      (GetAccessTokenResponse) {
    option (google.api.http) = {
      post : "/oauth/token"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Gets an access token using refresh token. Supports two grant_type: [refresh_token, client_credentials] - when refresh_token is used only refresh_token as request is required, for the client_credentials [client_id, client_secret] are required"
      tags: "auth"
    };
  }

  // Create an application.
  rpc createApplication(CreateApplicationRequest) returns
      (CreateApplicationResponse) {
    option (google.api.http) = {
      post : "/oauth/applications/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Creates the application."
      tags: "application"
    };
  }

  // Delete an application.
  rpc deleteApplication(DeleteApplicationsRequest) returns
      (DeleteApplicationResponse) {
    option (google.api.http) = {
      delete : "/oauth/applications/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Creates the application."
      tags: "application"
    };
  }

  // Lists all application visible to requesting actor.
  rpc listApplications(ListApplicationsRequest) returns
      (ListApplicationsResponse) {
    option (google.api.http) = {
      post : "/oauth/applications/list"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "List applications."
      tags: "application"
    };
  }

  // RotateApplicationRequest returns the new application with rotated secret
  rpc rotateApplicationSecret(RotateApplicationSecretRequest) returns
      (RotateApplicationSecretResponse) {
    option (google.api.http) = {
      post : "/oauth/applications/rotate"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Rotates the application secret."
      tags: "application"
    };
  }
}
