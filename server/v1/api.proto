// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";

option go_package = "github.com/tigrisdata/tigrisdb/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";

// BUG: gnostic protoc-gen-openapi doesn't support enum generation
// https://github.com/google/gnostic/issues/255

message ErrorDetails {
  uint32 code = 1;
  string msg = 2;
}

// WriteOptions contain write behavior modifying options
message WriteOptions {
  // Perform operation in the context of this transaction
  TransactionCtx tx_ctx = 1;
}

// ReadRequestOptions contain read behavior modifying options
message ReadRequestOptions {
  // Perform operation in the context of this transaction
  TransactionCtx tx_ctx = 1;
  // Limit the number of documents returned by the read operation
  int64 limit = 2;
  // Number of documents to skip before starting to return resulting documents
  int64 skip = 3;
  // Start returning document start from this primary key
  bytes offset = 4;
}

// Database requests modifying options
message DatabaseOptions {}
// Collection requests modifying options
message CollectionOptions {
  // Perform operation in the context of this transaction
  TransactionCtx tx_ctx = 1;
}
// Modify start transaction behavior
message TransactionOptions {}

/*
  Contains ID which uniquely identifies transaction.
  This context is returned by StartTransaction request and
  should be passed in the options of document modification
  requests in order to run them in the context of the same
  transaction
 */
message TransactionCtx {
  string id = 1;
  string origin = 2;
}

// Start new transaction in database specified by "db"
message BeginTransactionRequest {
  // Database name this transaction belongs to
  string db = 1;
  TransactionOptions options = 2;
}

//  Start transaction returns transaction context
//  which uniquely identifies the transaction
message BeginTransactionResponse { TransactionCtx tx_ctx = 1; }

// Commit transaction with the given ID
message CommitTransactionRequest {
  // Database name this transaction belongs to
  string db = 1;
  // Contains unique transaction ID
  TransactionCtx tx_ctx = 2;
}
message CommitTransactionResponse {}

// Rollback transaction with the given ID
message RollbackTransactionRequest {
  // Database name this transaction belongs to
  string db = 1;
  // Contains unique transaction ID
  TransactionCtx tx_ctx = 2;
}
message RollbackTransactionResponse {}

// Insert request options
message InsertRequestOptions {
  WriteOptions write_options = 1;
}

message InsertRequest {
  // Database name where to insert documents
  string db = 1;
  // Collection name where to insert documents
  string collection = 2;
  // Array of documents to insert.
  // Should be proper JSON object
  repeated bytes documents = 3;
  InsertRequestOptions options = 4;
}

message InsertResponse {
  // Returns the commit timestamp of the documents.
  string timestamp = 1;
}

message ReplaceRequestOptions {
  WriteOptions write_options = 1;
}

message ReplaceRequest {
  // Database name where to replace documents.
  string db = 1;
  // Collection name where to replace documents.
  string collection = 2;
  // Array of documents to be replaced.
  // Should be proper JSON object.
  repeated bytes documents = 3;
  ReplaceRequestOptions options = 4;
}

message ReplaceResponse {
  // Returns the commit timestamp of the replaced documents.
  string timestamp = 1;
}

message DeleteRequestOptions {
  WriteOptions write_options = 1;
}

message DeleteRequest {
  // Database name where to insert documents
  string db = 1;
  // Collection name where to insert documents
  string collection = 2;
  // Delete documents which matching specified filter.
  // The filter should proper JSON object.
  // Filter syntax described here: {TBD}
  bytes filter = 3;
  DeleteRequestOptions options = 4;
}

message DeleteResponse {
  // Returns the timestamp when the documents are deleted.
  string timestamp = 1;
}

message UpdateRequestOptions {
  WriteOptions write_options = 1;
}

message UpdateRequest {
  // Database name where to update documents
  string db = 1;
  // Collection name where to update documents
  string collection = 2;
  // Fields contains set of fields
  // with the values which need to be updated.
  // Should be proper JSON object.
  bytes fields = 3;
  // Update documents which matching specified filter.
  // The filter should proper JSON object
  // Filter syntax described here: {TBD}
  bytes filter = 4;
  UpdateRequestOptions options = 5;
}

message UpdateResponse {
  // Returns the timestamp when the documents are updated.
  string timestamp = 1;
  // Returns the number of documents modified.
  int32 modified_count = 2;
}

message ReadRequest {
  // Database name to read documents from
  string db = 1;
  // Collection name to read documents from
  string collection = 2;
  // Returns documents matching this filter.
  // The filter should proper JSON object
  // Filter syntax described here: {TBD}
  bytes filter = 3;
  // Limit fields returned by the read
  // by this subset of the fields
  // The fields should proper JSON object
  bytes fields = 4;
  ReadRequestOptions options = 5;
}

message ReadResponse {
  // data has the user requested data
  bytes data = 1;
  // resume_token is internal key, used for pagination.
  bytes resume_token = 2;
}

message CreateDatabaseRequest {
  // Create database with this name
  string db = 1;
  DatabaseOptions options = 2;
}

message CreateDatabaseResponse {
  // a detailed response message.
  string message = 1;
  // an enum with value set as "created"
  string status = 2;
}

message DropDatabaseRequest {
  // Drop database with this name.
  // Deletes all the collections in the database.
  // Use with caution.
  string db = 1;
  DatabaseOptions options = 2;
}

message DropDatabaseResponse {
  // a detailed response message.
  string message = 1;
  // an enum with value set as "dropped"
  string status = 2;
}

message CreateOrUpdateCollectionRequest {
  // Database name where to create collection
  string db = 1;
  // Collection name to create
  string collection = 2;
  // Schema of the documents in this collection. The schema specifications are same as
  // JSON schema specification defined here(https://json-schema.org/specification.html).
  // As an example, the schema looks like below,
  // {
  //  "name": "user",
  //  "description": "Collection of documents with details of users",
  //  "properties": {
  //    "id": {
  //      "description": "A unique identifier for the user",
  //      "type": "integer"
  //    },
  //    "name": {
  //      "description": "Name of the user",
  //      "type": "string",
  //      "maxLength": 100
  //    },
  //    "balance": {
  //      "description": "User account balance",
  //      "type": "number"
  //    }
  //  },
  //  "primary_key": ["id"]
  // }
  bytes schema = 3;
  bool only_create = 4;
  CollectionOptions options = 5;
}

message CreateOrUpdateCollectionResponse {
  // a detailed response message.
  string message = 1;
  // an enum with value set as "created" or "updated".
  string status = 2;
}

message DropCollectionRequest {
  // Database name of the collection
  string db = 1;
  // Collection name to drop
  string collection = 2;
  CollectionOptions options = 3;
}

message DropCollectionResponse {
  // a detailed response message.
  string message = 1;
  // an enum with value set as "dropped"
  string status = 2;
}

message DatabaseInfo {
  string name = 1;
}

message ListDatabasesRequest {
}

message ListDatabasesResponse {
  // List of the databases.
  repeated DatabaseInfo databases = 1;
}

message ListCollectionsRequest {
  // List collection in this database
  string db = 1;
  CollectionOptions options = 2;
}

message CollectionInfo {
  string name = 1;
}

message ListCollectionsResponse {
  // List of the collections in the database
  repeated CollectionInfo collections = 1;
}

service TigrisDB {
  // Starts a new transaction and returns a transactional object. All reads/writes performed
  // within a transaction will run with serializable isolation.
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/transactions/begin"
      body : "*"
    };
  }
  // Atomically commit all the changes performed in the context of the transaction. Commit provides all
  // or nothing semantics by ensuring no partial updates are in the database due to a transaction failure.
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/transactions/commit"
      body : "*"
    };
  }
  // Rollback transaction discards all the changes
  // performed in the transaction
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/transactions/rollback"
      body : "*"
    };
  }

  // Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
  // in the request already exists. Insert provides idempotency by returning an error if the document
  // already exists. To replace documents, use REPLACE API instead of INSERT.
  rpc Insert(InsertRequest) returns (InsertResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/documents/insert"
      body : "*"
    };
  }
  // Inserts the documents or replaces the existing documents in the collections.
  rpc Replace(ReplaceRequest) returns (ReplaceResponse) {
    option (google.api.http) = {
      put : "/api/v1/databases/{db}/collections/{collection}/documents/replace"
      body : "*"
    };
  }
  // Delete a range of documents in the collection using the condition provided in the filter.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/collections/{collection}/documents/delete"
      body : "*"
    };
  }
  // Update a range of documents in the collection using the condition provided in the filter.
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put : "/api/v1/databases/{db}/collections/{collection}/documents/update"
      body : "*"
    };
  }
  //  Reads range of documents from the collection using the condition in the filter.
  rpc Read(ReadRequest) returns (stream ReadResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/documents/read"
      body : "*"
    };
  }

  // Creates a new collection or atomically upgrades the collection to the new schema changes in the database
  // passed in the request.
  rpc CreateOrUpdateCollection(CreateOrUpdateCollectionRequest) returns (CreateOrUpdateCollectionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/createOrUpdate"
      body : "*"
    };
  }
  // Drop the collection and all its documents in the database passed in the request.
  rpc DropCollection(DropCollectionRequest) returns (DropCollectionResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/collections/{collection}/drop"
      body : "*"
    };
  }
  // List returns all the databases.
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/list"
    };
  }
  // List all collections in the database passed in the request.
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/list"
      body : "*"
    };
  }
  // Creates a new database and returns a AlreadyExists error if the database already exists.
  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/create"
      body : "*"
    };
  }

  // Drop database deletes all the collections in the database along with all it documents.
  rpc DropDatabase(DropDatabaseRequest) returns (DropDatabaseResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/drop"
      body : "*"
    };
  }
}
