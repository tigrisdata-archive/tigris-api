// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";

option (openapi.v3.document) = {
  info: {
    title: "Tigris API Reference"
    version: "0.0.1"
    description: "\n## Overview\nThis section is organized around HTTP APIs. The APIs accepts JSON requests and returns JSON-encoded responses. The APIs conforms to standard HTTP status codes."
    license: {
      name: "Apache License"
      url: "https://github.com/tigrisdata/tigris/blob/main/LICENSE"
    }
  }
  security: {
    additional_properties: {
      name: "BearerAuth"
      value: {
        value: []
      }
    }
  }
  tags: [{
    name: "Authentication"
    description: "The auth section of API provides OAuth 2.0 APIs. Tigris supports pluggable OAuth provider. Pass the token in the headers for authentication, as an example `-H \"Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6I\"`(replace it with your token). All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail."
  }, {
    name: "Application Keys"
    description: "The application keys section provide APIs that can be used to manage application keys for your project. A single project can have one or more application keys."
  }, {
    name: "Projects"
    description: "Every Tigris projects comes with a transactional document database built on FoundationDB, one of the most resilient and battle-tested open source distributed key-value store. A database is created automatically for you when you create a project."
  }, {
    name: "Database"
    description: "The Database section provide APIs that can be used to interact with the database. A single Database can have one or more collections. A database is created automatically for you when you create a project."
  }, {
    name: "Collections"
    description: "The Collections section provide APIs that can be used to manage collections. A collection can have one or more documents."
  }, {
    name: "Management"
    description: "The Management section provide APIs that can be used to manage users, and app_keys."
  }, {
    name: "Observability"
    description: "The Observability section has APIs that provides full visibility into the health, metrics, and monitoring of the Server."
  }, {
    name: "Cache"
    description: "The cache section provide APIs that can be used to perform cache operations."
  }, {
    name: "Realtime"
    description: "The realtime section provide APIs that can be used realtime operations."
  }, {
    name: "Search"
    description: "The search section provides you APIs that can be used to implement powerful apps with search experiences. You can manage storing documents on your own or you can simply integrate it with your database."
  }]
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
            }
          }
        }
      ]
    }
  },
  servers: [{
    url:"https://api.preview.tigrisdata.cloud",
    description: "Tigris Cloud",
  }, {
    url:"http://localhost:8081",
    description: "Localhost",
  }]
};

// Additional options to modify write requests.
message WriteOptions {
}

// A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set
// this option to 'ci' that will apply to all the text fields in the filters.
message Collation {
  string case = 1;
}

// Options that can be used to modify the results, for example "limit" to control the number of documents
// returned by the server.
message ReadRequestOptions {
  // Limit the number of documents returned by the read operation.
  int64 limit = 2;
  // Number of documents to skip before starting to return resulting documents.
  int64 skip = 3;
  // A cursor for use in pagination. The next streams will return documents after this offset.
  bytes offset = 4;
  // A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set
  // this option to 'ci' that will apply to all the text fields in the filters.
  Collation collation = 5;
}

// Database requests modifying options.
message DatabaseOptions {
}

// Collection requests modifying options.
message CollectionOptions {
}

// Options that can be used to modify the transaction semantics.
message TransactionOptions {}

// Contains ID which uniquely identifies transaction
// This context is returned by BeginTransaction request and
// should be passed in the metadata (headers) of subsequent requests
// in order to run them in the context of the same transaction.
message TransactionCtx {
  // Unique for a single transactional request.
  string id = 1;
  // Serves as an internal identifier.
  string origin = 2;
}

// Start new transaction in project specified by "project".
message BeginTransactionRequest {
  // Project name whose DB this transaction belongs to.
  string project = 1;
  // The transaction options.
  TransactionOptions options = 2;
  // Optionally specify a project branch name to perform operation on
  string branch = 3;
}

//  Start transaction returns transaction context
//  which uniquely identifies the transaction
message BeginTransactionResponse {
  // Returns a tigris transactional context with details about the transactions.
  TransactionCtx tx_ctx = 1;
}

// Commit transaction with the given ID
message CommitTransactionRequest {
  // Project name whose DB this transaction belongs to.
  string project = 1;
  // Optionally specify a database branch name to perform operation on
  string branch = 2;
}
message CommitTransactionResponse {
  // Status of commit transaction operation.
  string status = 1;
}

// Rollback transaction with the given ID
message RollbackTransactionRequest {
  // Project name whose DB this transaction belongs to.
  string project = 1;
  // Optionally specify a database branch name to perform operation on
  string branch = 2;
}
message RollbackTransactionResponse {
  // Status of rollback transaction operation.
  string status = 1;
}

// additional options for insert requests.
message InsertRequestOptions {
  WriteOptions write_options = 1;
}

// additional options for import requests.
message ImportRequestOptions {
  WriteOptions write_options = 1;
}

// Has metadata related to the documents stored.
message ResponseMetadata {
  // Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
  google.protobuf.Timestamp created_at = 1;
  // Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
  google.protobuf.Timestamp updated_at = 2;
  // Time at which the document was deleted. Measured in nano-seconds since the Unix epoch.
  google.protobuf.Timestamp deleted_at = 3;
}

message InsertRequest {
  // Project name whose db is under target to insert documents.
  string project = 1;
  // Collection name where to insert documents.
  string collection = 2;
  // Array of documents to insert. Each document is a JSON object.
  repeated bytes documents = 3;
  InsertRequestOptions options = 4;
  // Optionally specify a database branch name to perform operation on
  string branch = 5;
}

message InsertResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // An enum with value set as "inserted"
  string status = 2;
  // an array returns the value of the primary keys.
  repeated bytes keys = 3;
}

message ImportRequest {
  // Project name whose db is under target to import documents.
  string project = 1;
  // Collection name where to import documents.
  string collection = 2;
  // Array of documents to import. Each document is a JSON object.
  repeated bytes documents = 3;
  ImportRequestOptions options = 4;
  // Optionally specify a database branch name to perform operation on
  string branch = 5;

  // Allow to create collection if it doesn't exists
  bool create_collection = 6;

  // List of fields which constitutes primary key of the collection
  //
  // If not specified and field with name 'id' is present,
  // it's used as a primary key, further if inferred type is
  // UUID, then it's set as autogenerated.
  repeated string primary_key = 7;
  // The list of autogenerated fields of the collection
  repeated string autogenerated = 8;
}

message ImportResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // An enum with value set as "inserted"
  string status = 2;
  // an array returns the value of the primary keys.
  repeated bytes keys = 3;
}

// Additional options for replace requests.
message ReplaceRequestOptions {
  WriteOptions write_options = 1;
}

message ReplaceRequest {
  // Project name whose db is under target to replace documents.
  string project = 1;
  // Collection name where to replace documents.
  string collection = 2;
  // Array of documents to be replaced. Each document is a JSON object.
  repeated bytes documents = 3;
  ReplaceRequestOptions options = 4;
  // Optionally specify a database branch name to perform operation on
  string branch = 5;
}

message ReplaceResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // an enum with value set as "replaced"
  string status = 2;
  // an array returns the value of the primary keys.
  repeated bytes keys = 3;
}

// Additional options for deleted requests.
message DeleteRequestOptions {
  WriteOptions write_options = 1;
  // A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set
  // this option to 'ci' that will apply to all the text fields in the filters.
  Collation collation = 2;
  // Limit the number of documents to be deleted
  int64 limit = 3;
}

message DeleteRequest {
  // Project name whose db is under target to delete documents.
  string project = 1;
  // Collection name where to insert documents.
  string collection = 2;
  // Delete documents which matching specified filter.
  // A filter can simply be key, value where key
  // is the field name and value would be the value for this field. Or a filter can be logical where
  // two or more fields can be logically joined using $or and $and. A few examples of filter:
  // <li> To delete a user document where the id has a value 1: ```{"id": 1 }```
  // <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
  bytes filter = 3;
  DeleteRequestOptions options = 4;
  // Optionally specify a database branch name to perform operation on
  string branch = 5;
}

message DeleteResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // an enum with value set as "deleted"
  string status = 2;
  // Returns the number of documents deleted.
  int32 deleted_count = 3;
}

// Additional options for update requests.
message UpdateRequestOptions {
  WriteOptions write_options = 1;
  // A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set
  // this option to 'ci' that will apply to all the text fields in the filters.
  Collation collation = 2;
  // Limit the number of documents to be updated
  int64 limit = 3;
}

message UpdateRequest {
  // Project name whose db is under target  to update documents
  string project = 1;
  // Collection name where to update documents
  string collection = 2;
  // Fields contains set of fields
  // with the values which need to be updated.
  // Should be proper JSON object.
  bytes fields = 3;
  // Update documents which matching specified filter.
  // A filter can simply be key, value where key
  // is the field name and value would be the value for this field. Or a filter can be logical where
  // two or more fields can be logically joined using $or and $and. A few examples of filter:
  // <li> To update a user document where the id has a value 1: ```{"id": 1 }```
  // <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
  bytes filter = 4;
  UpdateRequestOptions options = 5;
  // Optionally specify a database branch name to perform operation on
  string branch = 6;
}

message UpdateResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // Returns the number of documents modified.
  int32 modified_count = 2;
  // an enum with value set as "updated".
  string status = 3;
}

message ReadRequest {
  // Project name whose db is under target to read documents from.
  string project = 1;
  // Collection name to read documents from.
  string collection = 2;
  // Returns documents matching this filter. A filter can simply be a key, value pair where a key is the field name and the value would be the value for this field.
  // Tigris also allows complex filtering by passing logical expressions. Logical filters are applied on two or more fields using `$or` and `$and`.
  // A few examples of filters:
  // <li> To read a user document where the id has a value 1: ```{"id": 1 }```
  // <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
  // Filter allows setting collation on an individual field level. To set collation for all the fields see options.
  // The detailed documentation of the filter is <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.
  bytes filter = 3;
  // To read specific fields from a document. Default is all.
  bytes fields = 4;
  // Options that can be used to modify the results, for example `limit` to control the number of documents
  // returned by the server.
  ReadRequestOptions options = 5;
  // Array of fields and corresponding sort orders to order the results. Ex: 1 `[{ "salary": "$desc" }]`, Ex: 2  `[{ "salary": "$asc"}]`
  bytes sort = 6;
  // Optionally specify a database branch name to perform operation on
  string branch = 7;
}

message ReadResponse {
  // Object containing the collection document.
  bytes data = 1;
  // An internal key, used for pagination.
  bytes resume_token = 2;
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 3;
}

message SearchRequest {
  // Project name whose db is under target to search documents from.
  string project = 1;
  // Collection name to search documents from.
  string collection = 2;
  // Query string for searching across text fields
  string q = 3;
  // Array of fields to project search query against
  repeated string search_fields = 4;
  // Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
  bytes filter = 5;
  // Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}`
  // where the size controls the total facets for this field.
  bytes facet = 6;
  // Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
  bytes sort = 7;
  // Array of document field names to include in results. By default, all fields are included.
  repeated string include_fields = 8;
  // Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
  repeated string exclude_fields = 9;
  // Optionally can set the number of hits to be returned per page, default is 20.
  int32 page_size = 10;
  // Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
  int32 page = 11;
  // A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set
  // this option to 'ci' that will apply to all the text fields in the filters.
  Collation collation = 12;
  // Optionally specify a database branch name to perform operation on
  string branch = 13;
  // Group by can be used to group search results. For example, to group by city field the
  // syntax would be: `{ "fields": ["city"]}`. Optionally a grouping limit can be set. By default it is 3 per group.
  bytes group_by = 14;
  // Vector is an object that is used for vector search. For example, to vector search on a "vec" field the
  // syntax would be: `{ "vec": [0.34, 0.12, 0.95], "top_k": 10}`.
  bytes vector = 15;
}

// Response struct for search
message SearchResponse {
  repeated SearchHit hits = 1;
  map<string, SearchFacet> facets = 2;
  SearchMetadata meta = 3;
}

message SearchHit {
  // Actual search document
  bytes data = 1;
  // Has metadata related to the search hit
  SearchHitMeta metadata = 2;
}

// Contains metadata related to the search hit, has information about document created_at/updated_at as well.
message SearchHitMeta {
  // Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
  google.protobuf.Timestamp created_at = 1;
  // Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
  google.protobuf.Timestamp updated_at = 2;
  // Match has the information about the matching document like the matched field, etc
  Match match = 3;
}

message SearchFacet {
  repeated FacetCount counts = 1;
  FacetStats stats = 2;
}

message FacetCount {
  int64 count = 1;
  string value = 2;
}

// Additional stats for faceted field
message FacetStats {
  // Average of all values in a field. Only available for numeric fields
  optional double avg = 1;
  // Maximum of all values in a field. Only available for numeric fields
  optional double max = 2;
  // Minimum of all values in a field. Only available for numeric fields
  optional double min = 3;
  // Sum of all values in a field. Only available for numeric fields
  optional double sum = 4;
  // Total number of values in a field
  int64 count = 5;
}

message SearchMetadata {
  // Total number of search results across all pages
  int64 found = 1;
  // Number representing the total pages of results
  int32 total_pages = 2;
  Page page = 3;
  repeated string matched_fields = 4;
}

message MatchField {
  string name = 1;
}

message Match {
  repeated MatchField fields = 1;
  string score = 2;
}

message GroupedSearchHits {
  repeated string group_keys = 1;
  repeated SearchHit hits = 2;
}

// Pagination metadata for SearchResponse
message Page {
  // Number representing the current page of results
  int32 current = 1;
  // Maximum number of results per page
  int32 size = 3;
}

message CreateProjectRequest {
  // Create project with this name.
  string project = 1;
}

message CreateProjectResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "created".
  string status = 2;
}

message DeleteProjectRequest {
  // Delete Project with this name.
  // <p></p>**Note**: Deletes all resources under this project. Use with caution.
  string project = 1;
}

message DeleteProjectResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "dropped".
  string status = 2;
}

message CreateBranchRequest {
  // Create a database branch in this project
  string project = 1;
  // Name of the database branch to be created.
  // <p></p>**Note**: `main` is a reserved branch name for primary database and is automatically created with CreateProject
  string branch = 2;
}

message CreateBranchResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "created".
  string status = 2;
}

message DeleteBranchRequest {
  // Delete a database branch in this project
  string project = 1;
  // Name of the database branch to delete.
  // <p></p>**Note**: `main` branch cannot be deleted, use DeleteProject instead
  string branch = 2;
}

message DeleteBranchResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "deleted".
  string status = 2;
}

message ListBranchesRequest {
  // List database branches in this project
  string project = 1;
}

message ListBranchesResponse {
  // List of all the branches in this database
  repeated BranchInfo branches = 1;
}


message CreateOrUpdateCollectionRequest {
  // Project name whose db is under target to create or update collection.
  string project = 1;
  // Collection name to create.
  string collection = 2;
  // The schema specifications are same as
  // JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>.
  //<p></p>
  // Schema example:
  // `{
  //  "title": "user",
  //  "description": "Collection of documents with details of users",
  //  "properties": {
  //    "id": {
  //      "description": "A unique identifier for the user",
  //      "type": "integer"
  //    },
  //    "name": {
  //      "description": "Name of the user",
  //      "type": "string",
  //      "maxLength": 128
  //    },
  //    "balance": {
  //      "description": "User account balance",
  //      "type": "number"
  //    }
  //  },
  //  "primary_key": ["id"]
  // }`
  bytes schema = 3;
  // If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status
  // code 409. The default is false.
  bool only_create = 4;
  CollectionOptions options = 5;
  // Optionally specify a database branch name to perform operation on
  string branch = 6;
}

message CreateOrUpdateCollectionResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "created" or "updated"
  string status = 2;
}

message DropCollectionRequest {
  // Project name whose db is under target to delete collection.
  string project = 1;
  // Collection name to delete.
  string collection = 2;
  CollectionOptions options = 3;
  // Optionally specify a project branch name to perform operation on
  string branch = 4;
}

message DropCollectionResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "dropped".
  string status = 2;
}

message ProjectInfo {
  // Project name.
  string project = 1;

  // Metadata about the Project.
  ProjectMetadata metadata = 2;
}

message CollectionInfo {
  // Collection name.
  string collection = 1;

  // Metadata about the collection.
  CollectionMetadata metadata = 2;
}

message BranchInfo {
  // Branch name
  string branch = 1;

  // Metadata about the branch
  BranchMetadata metadata = 2;
}

message ListProjectsRequest {
}

message ListProjectsResponse {
  // List of the projects.
  repeated ProjectInfo projects = 1;
}

message ListCollectionsRequest {
  // Project name whose db is under target to list collections.
  string project = 1;
  CollectionOptions options = 2;
  // Optionally specify a database branch name to perform operation on
  string branch = 3;
}

message ListCollectionsResponse {
  // List of the collections info in the database.
  repeated CollectionInfo collections = 2;
}

message DescribeDatabaseRequest {
  // Project name whose db is under target to get description.
  string project = 1;

  // Return schema in the requested format.
  // Format can be JSON, Go, TypeScript, Java.
  // Default is JSON.
  string schema_format = 2;
  // Optionally specify a database branch name to perform operation on
  string branch = 3;
}

message DescribeCollectionRequest {
  // Project name whose db is under target to get description of its collection.
  string project = 1;

  // Name of the collection.
  string collection = 2;

  // Return schema in the requested format.
  // Format can be JSON, Go, TypeScript, Java.
  // Default is JSON.
  string schema_format = 3;

  // Collection options.
  CollectionOptions options = 4;
  // Optionally specify a database branch name to perform operation on
  string branch = 5;
}

// A detailed description of the database and all the associated collections.
// Description of the collection includes schema details as well.
message DescribeDatabaseResponse {
  // Metadata about the database.
  DatabaseMetadata metadata = 1;

  // A detailed description about all the collections.
  // The description returns collection metadata and the schema.
  repeated CollectionDescription collections = 2;

  // Sum of all the collections sizes present in this database
  int64 size = 3;
  // List of all the branches in this database
  repeated string branches = 4;
}

// A detailed description of the collection.
// The description returns collection metadata and the schema.
message DescribeCollectionResponse {
  // Name of the collection.
  string collection = 1;

  // Metadata about the collection.
  CollectionMetadata metadata = 2;

  // Schema of this collection.
  bytes schema = 3;
  // The size of this collection in bytes.
  int64 size = 4;
}

message ProjectDescription {
}

message CollectionDescription {
  // Name of the collection.
  string collection = 1;

  // Metadata about the collection.
  CollectionMetadata metadata = 2;

  // Collections schema
  bytes schema = 3;
  // Collection size in bytes
  int64 size = 4;
}

message ProjectMetadata {
}

message DatabaseMetadata {
}

message CollectionMetadata {
}

message BranchMetadata {
}

// Request creation of user app key
message CreateAppKeyRequest {
  // A human readable app name
  string name = 1;
  // A human readable app description
  string description = 2;
  // Project name
  string project = 3;
}

// CreateAppKeyResponse returns created app keys
message CreateAppKeyResponse {
  // created app object
  AppKey created_app_key = 1;
}

// To update the description of the app key
message UpdateAppKeyRequest {
  // app key id - this is not allowed to update
  string id = 1;
  // project name -  this is not allowed to update
  string project = 2;
  // A new human readable app name
  string name = 3;
  // A new human readable app description
  string description = 4;
}

// Returns response for updating the app key description
message UpdateAppKeyResponse {
  // updated app key object
  AppKey updated_app_key = 1;
}

// An user AppKey
message AppKey {
  // Generated client id
  string id = 1;
  // A human readable app name
  string name = 2;
  // A human readable app description
  string description = 3;
  // Generated app secret
  string secret = 4;
  // Created at
  int64 created_at = 5;
  // Created by
  string created_by = 6;
  // Updated at
  int64 updated_at = 7;
  // Updated by
  string updated_by = 8;
  // Project it belongs to
  string project = 9;
}

// Request listing of all the app keys those are visible to requesting actor
message ListAppKeysRequest {
  // Project name filter
  string project = 1;
}

// ListAppKeysResponse returns one or more visible app keys to user
message ListAppKeysResponse {
  repeated AppKey app_keys = 1;
}

// Request deletion of an app key
message DeleteAppKeyRequest {
  // app_key id
  string id = 1;
  // project name
  string project = 2;
}

// AppKeys returns the flag to convey if app key was deleted
message DeleteAppKeyResponse {
  // status flag for delete operation
  bool deleted = 1;
}

// Request rotation of an app key secret
message RotateAppKeyRequest {
  // app key id
  string id = 1;
  // project name
  string project = 2;
}

// RotateAppKeyResponse returns the new app key with rotated secret
message RotateAppKeyResponse{
  // A new app key with rotated secret.
  AppKey app_key = 1;
}

service Tigris {
  // Starts a new transaction and returns a transactional object. All reads/writes performed
  // within a transaction will run with serializable isolation. Tigris offers global transactions,
  // with ACID properties and strict serializability.
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/transactions/begin"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Begin a transaction"
      tags: "Database"
    };
  }
  // Atomically commit all the changes performed in the context of the transaction. Commit provides all
  // or nothing semantics by ensuring no partial updates are in the project due to a transaction failure.
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/transactions/commit"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Commit a Transaction"
      tags: "Database"
    };
  }
  // Rollback transaction discards all the changes
  // performed in the transaction
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/transactions/rollback"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Rollback a transaction"
      tags: "Database"
    };
  }

  // Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
  // in the request already exists. Insert provides idempotency by returning an error if the document
  // already exists. To replace documents, use REPLACE API instead of INSERT.
  rpc Insert(InsertRequest) returns (InsertResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/collections/{collection}/documents/insert"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Insert Documents"
      tags: "Collections"
    };
  }
  // Inserts the documents or replaces the existing documents in the collections.
  rpc Replace(ReplaceRequest) returns (ReplaceResponse) {
    option (google.api.http) = {
      put : "/v1/projects/{project}/database/collections/{collection}/documents/replace"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Insert or Replace Documents"
      tags: "Collections"
    };
  }
  // Delete a range of documents in the collection using the condition provided in the filter.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/v1/projects/{project}/database/collections/{collection}/documents/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Delete Documents"
      tags: "Collections"
    };
  }
  // Update a range of documents in the collection using the condition provided in the filter.
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put : "/v1/projects/{project}/database/collections/{collection}/documents/update"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Update Documents."
      tags: "Collections"
    };
  }
  // Reads a range of documents from the collection, or messages from a collection in case of event streaming. Tigris does not require you to
  // index any fields and automatically index all the fields which means you can filter by any field in the document.
  // An empty filter will trigger reading all the documents inside this collection. The API supports pagination that
  // can be used by passing `Limit/Skip` parameters. The `skip` parameter skips the number of documents from the start and
  // the `limit` parameter is used to specify the number of documents to read. You can find more detailed documentation
  // of the Read API <a href="https://docs.tigrisdata.com/overview/query" title="here">here</a>.
  rpc Read(ReadRequest) returns (stream ReadResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/collections/{collection}/documents/read"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Read Documents"
      tags: "Collections"
    };
  }

  // Searches a collection for the documents matching the query, or messages in case of event streaming. A search can be
  // a term search or a phrase search. Search API allows filtering the result set using filters as documented <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.
  // You can also perform a faceted search by passing the fields in the facet parameter.
  // You can find more detailed documentation of the Search API with multiple examples <a href="https://docs.tigrisdata.com/overview/search" title="here">here</a>.
  rpc Search(SearchRequest) returns (stream SearchResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/collections/{collection}/documents/search"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Search Documents."
      tags: "Collections"
    };
  }
  // Imports documents into the collection.
  //
  // It automatically:
  //  * Detects the schema of the documents in the batch
  //  * Evolves the schema as soon as it's backward compatible
  //  * Creates collection with inferred schema (if requested)
  rpc Import(ImportRequest) returns (ImportResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/collections/{collection}/documents/import"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Import Documents"
      tags: "Collections"
    };
  }
  // Creates a new collection or atomically upgrades the collection to the new schema provided in the request.
  // Schema changes are applied atomically and immediately without any downtime.
  // Tigris Offers two types of collections: <p></p>
  //    <li> `DOCUMENTS`: Offers rich CRUD APIs.
  //    <li> `MESSAGES`: Offers event streaming APIs.
  rpc CreateOrUpdateCollection(CreateOrUpdateCollectionRequest) returns (CreateOrUpdateCollectionResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/collections/{collection}/createOrUpdate"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Create or update a collection"
      tags: "Collections"
    };
  }
  // Drops the collection inside this project. This API deletes all of the
  // documents inside this collection and any metadata associated with it.
  rpc DropCollection(DropCollectionRequest) returns
      (DropCollectionResponse) {
    option (google.api.http) = {
      delete : "/v1/projects/{project}/database/collections/{collection}/drop"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Drop Collection"
      tags: "Collections"
    };
  }
  // List returns all the projects.
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get : "/v1/projects"
    };
    option(openapi.v3.operation) = {
      summary: "List Projects"
      tags: "Projects"
    };
  }
  // List all the collections present in the project passed in the request.
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {
    option (google.api.http) = {
      get : "/v1/projects/{project}/database/collections"
    };
    option(openapi.v3.operation) = {
      summary: "List Collections"
      tags: "Database"
    };
  }
  // Creates a new project. Returns an AlreadyExists error with a status code 409 if the project already exists.
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Create Project"
      tags: "Projects"
    };
  }

  // Delete Project deletes all the collections in this project along with all of the documents, and associated metadata for these collections.
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete : "/v1/projects/{project}/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Delete Project and all resources under project"
      tags: "Projects"
    };
  }

  // This API returns information related to the project along with all the collections inside the project.
  // This can be used to retrieve the size of the project or to retrieve schemas, branches and the size of all the collections present in this project.
  rpc DescribeDatabase(DescribeDatabaseRequest) returns
      (DescribeDatabaseResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/describe"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Describe database"
      tags: "Database"
    };
  }

  // Creates a new database branch, if not already existing.
  rpc CreateBranch(CreateBranchRequest) returns (CreateBranchResponse) {
    option(google.api.http) = {
      post : "/v1/projects/{project}/database/branches/{branch}/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Create a database branch"
      tags: "Database"
    };
  }

  // Deletes a database branch, if exists.
  // Throws 400 Bad Request if "main" branch is being deleted
  rpc DeleteBranch(DeleteBranchRequest) returns (DeleteBranchResponse) {
    option(google.api.http) = {
      delete : "/v1/projects/{project}/database/branches/{branch}/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Delete a database branch"
      tags: "Database"
    };
  }

  // List database branches
  rpc ListBranches(ListBranchesRequest) returns (ListBranchesResponse) {
    option(google.api.http) = {
      get: "/v1/projects/{project}/database/branches"
    };
    option(openapi.v3.operation) = {
      summary: "List database branches",
      tags: "Database"
    };
  }

  // Returns the information related to the collection. This can be used to retrieve the schema or size of the collection.
  rpc DescribeCollection(DescribeCollectionRequest) returns (DescribeCollectionResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/database/collections/{collection}/describe"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Describe Collection"
      tags: "Collections"
    };
  }

  // Create an app key.
  rpc CreateAppKey(CreateAppKeyRequest) returns
      (CreateAppKeyResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/apps/keys/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Creates the app key"
      tags: "Application Keys"
    };
  }

  // Update the description of an app key.
  rpc UpdateAppKey(UpdateAppKeyRequest) returns
      (UpdateAppKeyResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/apps/keys/update"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Updates the description of the app key"
      tags: "Application Keys"
    };
  }

  // Delete an app key.
  rpc DeleteAppKey(DeleteAppKeyRequest) returns
      (DeleteAppKeyResponse) {
    option (google.api.http) = {
      delete : "/v1/projects/{project}/apps/keys/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Deletes the app key"
      tags: "Application Keys"
    };
  }

  // Lists all app keys visible to requesting actor.
  rpc ListAppKeys(ListAppKeysRequest) returns
      (ListAppKeysResponse) {
    option (google.api.http) = {
      get : "/v1/projects/{project}/apps/keys"
    };
    option(openapi.v3.operation) = {
      summary: "List all the app keys"
      tags: "Application Keys"
    };
  }

  // Endpoint is used to rotate the secret for the app key.
  rpc RotateAppKeySecret(RotateAppKeyRequest) returns
      (RotateAppKeyResponse) {
    option (google.api.http) = {
      post : "/v1/projects/{project}/apps/keys/rotate"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Rotates the app key secret"
      tags: "Application Keys"
    };
  }
}
