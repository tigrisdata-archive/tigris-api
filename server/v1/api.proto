// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tigrisdata.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/tigrisdata/tigris/api";
option java_package = "com.tigrisdata.db.api.v1.grpc";

option (openapi.v3.document) = {
  info: {
    title: "Tigris API Reference"
    version: "0.0.1"
    description: "\n## Overview\nThis section is organized around HTTP APIs. The APIs accepts JSON requests and returns JSON-encoded responses. The APIs conforms to standard HTTP status codes."
    license: {
      name: "Apache License"
      url: "https://github.com/tigrisdata/tigris/blob/main/LICENSE"
    }
  }
  tags: [{
    name: "Admin"
    description: "APIs to manage or get more information about the server."
  }, {
    name: "Databases"
    description: "APIs that can used to manage databases. A single database can have one or more collections."
  },{
    name: "Collections"
    description: "APIs that can used to manage collections."
  },{
    name: "Documents"
    description: "APIs to manage documents insides a collection. Uniqueness of documents are enforced by the primary key."
  }, {
    name: "Transactions"
    description: "APIs to manage documents insides a collection. Uniqueness of documents are enforced by the primary key."
  }, {
    name: "Streams"
    description: "APIs that provide real-time events for writes made to collections in the database."
  }]
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
            }
          }
        }
      ]
    }
  }
};

// Codes returned by the Tigris server in the case of error
enum Code {
  OK = 0; // 200
  CANCELLED = 1; // 499
  UNKNOWN = 2; // 500
  INVALID_ARGUMENT = 3; // 400
  DEADLINE_EXCEEDED = 4; // 504
  NOT_FOUND = 5; // 404
  ALREADY_EXISTS = 6; // 409
  PERMISSION_DENIED = 7; // 403
  RESOURCE_EXHAUSTED = 8; // 429
  FAILED_PRECONDITION = 9; // 412
  ABORTED = 10; // 409
  OUT_OF_RANGE = 11; // 400
  UNIMPLEMENTED = 12; // 501
  INTERNAL = 13; // 500
  UNAVAILABLE = 14; // 503
  DATA_LOSS = 15; // 500
  UNAUTHENTICATED = 16; // 401

  // Above code are identical to GRPC standard codes: https://cloud.google.com/apis/design/errors
  // Below Tigris specific extended error codes are defined:

  CONFLICT = 17; // 409
  BAD_GATEWAY = 18; // 502
}

// Contains retry information
message RetryInfo {
  // retry delay advice in milliseconds
  int32 delay = 3;
}

// ErrorDetails defines error format passed by Tigris HTTP protocol
message ErrorDetails {
  string code = 1;
  string message = 2;
  RetryInfo retry = 3;
}

// The Error type defines a logical error model
message Error {
  // The status code is a short, machine parsable string,
  // which uniquely identifies the error type.
  // Tigris to HTTP code mapping [here](/reference/http-code)
  Code code = 1;
  // A developer-facing descriptive error message
  string message = 2;
}

// Additional options to modify write requests.
message WriteOptions {
  // Perform operation in the context of this transaction.
  TransactionCtx tx_ctx = 1;
}

// Options that can be used to modify the results, for example "limit" to control the number of documents
// returned by the server.
message ReadRequestOptions {
  // Perform operation in the context of this transaction.
  TransactionCtx tx_ctx = 1;
  // Limit the number of documents returned by the read operation.
  int64 limit = 2;
  // Number of documents to skip before starting to return resulting documents.
  int64 skip = 3;
  // A cursor for use in pagination. The next streams will return documents after this offset.
  bytes offset = 4;
}

// Database requests modifying options.
message DatabaseOptions {}

// Collection requests modifying options.
message CollectionOptions {
  // Perform operation in the context of this transaction.
  TransactionCtx tx_ctx = 1;
}

// Options that can be used to modify the transaction semantics.
message TransactionOptions {}

// Contains ID which uniquely identifies transaction
// This context is returned by BeginTransaction request and
// should be passed in the subsequent requests in order to run
// them in the context of the same transaction.
message TransactionCtx {
  // Unique for a single transactional request.
  string id = 1;
  // Serves as an internal identifier.
  string origin = 2;
}

// Start new transaction in database specified by "db".
message BeginTransactionRequest {
  // Database name this transaction belongs to.
  string db = 1;
  // The transaction options.
  TransactionOptions options = 2;
}

//  Start transaction returns transaction context
//  which uniquely identifies the transaction
message BeginTransactionResponse {
  // Returns a tigris transactional context with details about the transactions.
  TransactionCtx tx_ctx = 1;
}

// Commit transaction with the given ID
message CommitTransactionRequest {
  // Database name this transaction belongs to.
  string db = 1;
  // Tigris transactional context with details about the transactions.
  TransactionCtx tx_ctx = 2;
}
message CommitTransactionResponse {
  // Status of commit transaction operation.
  string status = 1;
}

// Rollback transaction with the given ID
message RollbackTransactionRequest {
  // Database name this transaction belongs to.
  string db = 1;
  // Tigris transactional context with details about the transactions.
  TransactionCtx tx_ctx = 2;
}
message RollbackTransactionResponse {
  // Status of rollback transaction operation.
  string status = 1;
}

// additional options for insert requests.
message InsertRequestOptions {
  WriteOptions write_options = 1;
}

// Has metadata related to the documents stored.
message ResponseMetadata {
  // Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
  google.protobuf.Timestamp created_at = 1;
  // Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
  google.protobuf.Timestamp updated_at = 2;
  // Time at which the document was deleted. Measured in nano-seconds since the Unix epoch.
  google.protobuf.Timestamp deleted_at = 3;
}

message InsertRequest {
  // Database name where to insert documents.
  string db = 1;
  // Collection name where to insert documents.
  string collection = 2;
  // Array of documents to insert. Each document is a JSON object.
  repeated bytes documents = 3;
  InsertRequestOptions options = 4;
}

message InsertResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // An enum with value set as "inserted"
  string status = 2;
  // an array returns the value of the primary keys.
  repeated bytes keys = 3;
}

// Additional options for replace requests.
message ReplaceRequestOptions {
  WriteOptions write_options = 1;
}

message ReplaceRequest {
  // Database name where to replace documents.
  string db = 1;
  // Collection name where to replace documents.
  string collection = 2;
  // Array of documents to be replaced. Each document is a JSON object.
  repeated bytes documents = 3;
  ReplaceRequestOptions options = 4;
}

message ReplaceResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // an enum with value set as "replaced"
  string status = 2;
  // an array returns the value of the primary keys.
  repeated bytes keys = 3;
}

// Additional options for deleted requests.
message DeleteRequestOptions {
  WriteOptions write_options = 1;
}

message DeleteRequest {
  // Database name where to insert documents.
  string db = 1;
  // Collection name where to insert documents.
  string collection = 2;
  // Delete documents which matching specified filter.
  // A filter can simply be key, value where key
  // is the field name and value would be the value for this field. Or a filter can be logical where
  // two or more fields can be logically joined using $or and $and. A few examples of filter:
  // <li> To delete a user document where the id has a value 1: ```{"id": 1 }```
  // <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
  bytes filter = 3;
  DeleteRequestOptions options = 4;
}

message DeleteResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // an enum with value set as "deleted"
  string status = 2;
}

// Additional options for update requests.
message UpdateRequestOptions {
  WriteOptions write_options = 1;
}

message UpdateRequest {
  // Database name where to update documents
  string db = 1;
  // Collection name where to update documents
  string collection = 2;
  // Fields contains set of fields
  // with the values which need to be updated.
  // Should be proper JSON object.
  bytes fields = 3;
  // Update documents which matching specified filter.
  // A filter can simply be key, value where key
  // is the field name and value would be the value for this field. Or a filter can be logical where
  // two or more fields can be logically joined using $or and $and. A few examples of filter:
  // <li> To update a user document where the id has a value 1: ```{"id": 1 }```
  // <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
  bytes filter = 4;
  UpdateRequestOptions options = 5;
}

message UpdateResponse {
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 1;
  // Returns the number of documents modified.
  int32 modified_count = 2;
  // an enum with value set as "updated".
  string status = 3;
}

message ReadRequest {
  // Database name to read documents from.
  string db = 1;
  // Collection name to read documents from.
  string collection = 2;
  // Returns documents matching this filter.
  // A filter can simply be key, value where key
  // is the field name and value would be the value for this field. Or a filter can be logical where
  // two or more fields can be logically joined using $or and $and. A few examples of filter:
  // <li> To read a user document where the id has a value 1: ```{"id": 1 }```
  // <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`
  bytes filter = 3;
  // To read specific fields from a document. Default is all.
  bytes fields = 4;
  // Options that can be used to modify the results, for example "limit" to control the number of documents
  // returned by the server.
  ReadRequestOptions options = 5;
}

message ReadResponse {
  // Object containing the collection document.
  bytes data = 1;
  // An internal key, used for pagination.
  bytes resume_token = 2;
  // Has metadata related to the documents stored.
  ResponseMetadata metadata = 3;
}

message CreateDatabaseRequest {
  // Create database with this name.
  string db = 1;
  DatabaseOptions options = 2;
}

message CreateDatabaseResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "created".
  string status = 2;
}

message DropDatabaseRequest {
  // Drop database with this name. **Note**: Deletes all the collections in the database.
  // Use with caution.
  string db = 1;
  DatabaseOptions options = 2;
}

message DropDatabaseResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "dropped".
  string status = 2;
}

message CreateOrUpdateCollectionRequest {
  // Database name where to create collection.
  string db = 1;
  // Collection name to create.
  string collection = 2;
  // Schema of the documents in this collection. The schema specifications are same as
  // JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>.
  // <p></p>The following is an schema example:
  // `{
  //  "title": "user",
  //  "description": "Collection of documents with details of users",
  //  "properties": {
  //    "id": {
  //      "description": "A unique identifier for the user",
  //      "type": "integer"
  //    },
  //    "name": {
  //      "description": "Name of the user",
  //      "type": "string",
  //      "maxLength": 100
  //    },
  //    "balance": {
  //      "description": "User account balance",
  //      "type": "number"
  //    }
  //  },
  //  "primary_key": ["id"]
  // }`
  bytes schema = 3;
  bool only_create = 4;
  CollectionOptions options = 5;
}

message CreateOrUpdateCollectionResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "created" or "updated"
  string status = 2;
}

message DropCollectionRequest {
  // Database name of the collection.
  string db = 1;
  // Collection name to drop.
  string collection = 2;
  CollectionOptions options = 3;
}

message DropCollectionResponse {
  // A detailed response message.
  string message = 1;
  // An enum with value set as "dropped".
  string status = 2;
}

message DatabaseInfo {
  // Database name.
  string db = 1;

  // Metadata about the database. (ex. ...)
  DatabaseMetadata metadata = 2;
}

message CollectionInfo {
  // Collection name.
  string collection = 1;

  // Metadata about the collection.
  CollectionMetadata metadata = 2;
}

message ListDatabasesRequest {
}

message ListDatabasesResponse {
  // List of the databases.
  repeated DatabaseInfo databases = 1;
}

message ListCollectionsRequest {
  // List collection in this database.
  string db = 1;
  CollectionOptions options = 2;
}

message ListCollectionsResponse {
  // Name of the database.
  string db = 1;

  // List of the collections info in the database.
  repeated CollectionInfo collections = 2;
}

message DescribeDatabaseRequest {
  // Name of the database.
  string db = 1;
}

message DescribeCollectionRequest {
  // Name of the database.
  string db = 1;

  // Name of the collection.
  string collection = 2;

  // Collection options.
  CollectionOptions options = 3;
}

// A detailed description about the database and all associated collections.
// Description of the collection includes schema details as well.
message DescribeDatabaseResponse {
  // Name of the database.
  string db = 1;

  // Metadata about the database.
  DatabaseMetadata metadata = 2;

  // A detailed description about all the collections.
  // The description returns collection metadata and the schema.
  repeated CollectionDescription collections = 3;
}

// A detailed description about the collection.
// The description returns collection metadata and the schema.
message DescribeCollectionResponse {
  // Name of the collection.
  string collection = 1;

  // Metadata about the collection.
  CollectionMetadata metadata = 2;

  // Collections schema
  bytes schema = 3;
}

message DatabaseDescription {
}

message CollectionDescription {
  // Name of the collection.
  string collection = 1;

  // Metadata about the collection.
  CollectionMetadata metadata = 2;

  // Collections schema
  bytes schema = 3;
}

message DatabaseMetadata {
}

message CollectionMetadata {
}

message StreamRequestOptions {
}

message StreamRequest {
  string db = 1;
  string collection = 2;
  StreamRequestOptions options = 3;
}

message StreamResponse {
  StreamEvent event = 1;
}

message StreamEvent {
  bytes tx_id = 1;
  string collection = 2;
  string op = 3;
  bytes key = 4;
  bytes lkey = 5;
  bytes rkey = 6;
  bytes data = 7;
  bool last = 8;
}

message GetInfoRequest {
}

message GetInfoResponse {
  string server_version = 1;

  // NOTE: This is a hack to propagate this object definition to OpenAPI
  Error error = 2;
}

service Tigris {
  // Starts a new transaction and returns a transactional object. All reads/writes performed
  // within a transaction will run with serializable isolation.
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/transactions/begin"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Begin a transaction"
      tags: "Transactions"
    };
  }
  // Atomically commit all the changes performed in the context of the transaction. Commit provides all
  // or nothing semantics by ensuring no partial updates are in the database due to a transaction failure.
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/transactions/commit"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Commit a Transaction"
      tags: "Transactions"
    };
  }
  // Rollback transaction discards all the changes
  // performed in the transaction
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/transactions/rollback"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Rollback a transaction"
      tags: "Transactions"
    };
  }

  // Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
  // in the request already exists. Insert provides idempotency by returning an error if the document
  // already exists. To replace documents, use REPLACE API instead of INSERT.
  rpc Insert(InsertRequest) returns (InsertResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/documents/insert"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Insert Documents"
      tags: "Documents"
    };
  }
  // Inserts the documents or replaces the existing documents in the collections.
  rpc Replace(ReplaceRequest) returns (ReplaceResponse) {
    option (google.api.http) = {
      put : "/api/v1/databases/{db}/collections/{collection}/documents/replace"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Insert or Replace Documents"
      tags: "Documents"
    };
  }
  // Delete a range of documents in the collection using the condition provided in the filter.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/collections/{collection}/documents/delete"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Delete Documents"
      tags: "Documents"
    };
  }
  // Update a range of documents in the collection using the condition provided in the filter.
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put : "/api/v1/databases/{db}/collections/{collection}/documents/update"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Update Documents"
      tags: "Documents"
    };
  }
  //  Reads range of documents from the collection using the condition in the filter.
  rpc Read(ReadRequest) returns (stream ReadResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/documents/read"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Read Documents"
      tags: "Documents"
    };
  }

  // Creates a new collection or atomically upgrades the collection to the new schema changes in the database
  // passed in the request.
  rpc CreateOrUpdateCollection(CreateOrUpdateCollectionRequest) returns (CreateOrUpdateCollectionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/createOrUpdate"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Create or update a collection"
      tags: "Collections"
    };
  }
  // Drop the collection and all its documents in the database passed in the request.
  rpc DropCollection(DropCollectionRequest) returns (DropCollectionResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/collections/{collection}/drop"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Drop Collection"
      tags: "Collections"
    };
  }
  // List returns all the databases.
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/list"
    };
    option(openapi.v3.operation) = {
      summary: "List Databases"
      tags: "Databases"
    };
  }
  // List all collections in the database passed in the request.
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/list"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "List Collections"
      tags: "Databases"
    };
  }
  // Creates a new database and returns a AlreadyExists error if the database already exists.
  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/create"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Create Database"
      tags: "Databases"
    };
  }

  // Drop database deletes all the collections in the database along with all it documents.
  rpc DropDatabase(DropDatabaseRequest) returns (DropDatabaseResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/drop"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Drop Database"
      tags: "Databases"
    };
  }

  // Describe database describes the information related to database along
  // with all the collections inside database.
  rpc DescribeDatabase(DescribeDatabaseRequest) returns (DescribeDatabaseResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/describe"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Describe Database"
      tags: "Databases"
    };
  }

  // Describe collection describes the information related to collection.
  rpc DescribeCollection(DescribeCollectionRequest) returns (DescribeCollectionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/describe"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Describe Collection"
      tags: "Collections"
    };
  }

  // Provides real time events for the changes made into the database. Streams by default publish all events for a database
  // but can be restricted to a specific collection. These events can be useful to build event-driven applications.
  rpc Stream(StreamRequest) returns (stream StreamResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/stream"
      body : "*"
    };
    option(openapi.v3.operation) = {
      summary: "Stream"
      tags: "Streams"
    };
  }

  // Provides the information about the server. This information includes returning the server version, etc.
  rpc GetInfo(GetInfoRequest) returns
      (GetInfoResponse) {
    option (google.api.http) = {
      get : "/api/v1/info"
    };
    option(openapi.v3.operation) = {
      summary: "Information about the server"
      tags: "Admin"
    };
  }
}
