# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/apps/protoc-gen-openapi
openapi: 3.0.3
info:
    title: TigrisDB API
    version: 0.0.1
paths:
    /api/v1/databases/list:
        post:
            tags:
                - TigrisDB
            description: List returns all the databases.
            operationId: TigrisDB_ListDatabases
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDatabasesResponse'
    /api/v1/databases/{db}/collections/list:
        post:
            tags:
                - TigrisDB
            description: List all collections in the database passed in the request.
            operationId: TigrisDB_ListCollections
            parameters:
                - name: db
                  in: path
                  description: List collection in this database
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListCollectionsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListCollectionsResponse'
    /api/v1/databases/{db}/collections/{collection}/createOrUpdate:
        post:
            tags:
                - TigrisDB
            description: |-
                Creates a new collection or atomically upgrades the collection to the new schema changes in the database
                 passed in the request.
            operationId: TigrisDB_CreateOrUpdateCollection
            parameters:
                - name: db
                  in: path
                  description: Database name where to create collection
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to create
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateOrUpdateCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateOrUpdateCollectionResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/delete:
        delete:
            tags:
                - TigrisDB
            description: Delete a range of documents in the collection using the condition provided in the filter.
            operationId: TigrisDB_Delete
            parameters:
                - name: db
                  in: path
                  description: Database name where to insert documents
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/insert:
        post:
            tags:
                - TigrisDB
            description: |-
                Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
                 in the request already exists. Insert provides idempotency by returning an error if the document
                 already exists. To replace documents, use REPLACE API instead of INSERT.
            operationId: TigrisDB_Insert
            parameters:
                - name: db
                  in: path
                  description: Database name where to insert documents
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/read:
        post:
            tags:
                - TigrisDB
            description: Reads range of documents from the collection using the condition in the filter.
            operationId: TigrisDB_Read
            parameters:
                - name: db
                  in: path
                  description: Database name to read documents from
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to read documents from
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReadRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/replace:
        put:
            tags:
                - TigrisDB
            description: Inserts the documents or replaces the existing documents in the collections.
            operationId: TigrisDB_Replace
            parameters:
                - name: db
                  in: path
                  description: Database name where to replace documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to replace documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReplaceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReplaceResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/update:
        put:
            tags:
                - TigrisDB
            description: Update a range of documents in the collection using the condition provided in the filter.
            operationId: TigrisDB_Update
            parameters:
                - name: db
                  in: path
                  description: Database name where to update documents
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to update documents
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateResponse'
    /api/v1/databases/{db}/collections/{collection}/drop:
        delete:
            tags:
                - TigrisDB
            description: Drop the collection and all its documents in the database passed in the request.
            operationId: TigrisDB_DropCollection
            parameters:
                - name: db
                  in: path
                  description: Database name of the collection
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to drop
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DropCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DropCollectionResponse'
    /api/v1/databases/{db}/create:
        post:
            tags:
                - TigrisDB
            description: Creates a new database and returns a AlreadyExists error if the database already exists.
            operationId: TigrisDB_CreateDatabase
            parameters:
                - name: db
                  in: path
                  description: Create database with this name
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateDatabaseResponse'
    /api/v1/databases/{db}/drop:
        delete:
            tags:
                - TigrisDB
            description: Drop database deletes all the collections in the database along with all it documents.
            operationId: TigrisDB_DropDatabase
            parameters:
                - name: db
                  in: path
                  description: Drop database with this name. Deletes all the collections in the database. Use with caution.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DropDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DropDatabaseResponse'
    /api/v1/databases/{db}/transactions/begin:
        post:
            tags:
                - TigrisDB
            description: |-
                Starts a new transaction and returns a transactional object. All reads/writes performed
                 within a transaction will run with serializable isolation.
            operationId: TigrisDB_BeginTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeginTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeginTransactionResponse'
    /api/v1/databases/{db}/transactions/commit:
        post:
            tags:
                - TigrisDB
            description: |-
                Atomically commit all the changes performed in the context of the transaction. Commit provides all
                 or nothing semantics by ensuring no partial updates are in the database due to a transaction failure.
            operationId: TigrisDB_CommitTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CommitTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CommitTransactionResponse'
    /api/v1/databases/{db}/transactions/rollback:
        post:
            tags:
                - TigrisDB
            description: |-
                Rollback transaction discards all the changes
                 performed in the transaction
            operationId: TigrisDB_RollbackTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RollbackTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RollbackTransactionResponse'
components:
    schemas:
        BeginTransactionRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/TransactionOptions'
            description: Start new transaction in database specified by "db"
        BeginTransactionResponse:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Start transaction returns transaction context  which uniquely identifies the transaction
        CollectionInfo:
            type: object
            properties:
                name:
                    type: string
        CollectionOptions:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Collection requests modifying options
        CommitTransactionRequest:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Commit transaction with the given ID
        CommitTransactionResponse:
            type: object
            properties: {}
        CreateDatabaseRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/DatabaseOptions'
        CreateDatabaseResponse:
            type: object
            properties:
                message:
                    type: string
                    description: a detailed response message.
                status:
                    type: string
                    description: an enum with value set as "created"
        CreateOrUpdateCollectionRequest:
            type: object
            properties:
                schema:
                    type: object
                    description: 'Schema of the documents in this collection. The schema specifications are same as JSON schema specification defined here(https://json-schema.org/specification.html). As an example, the schema looks like below, {  "name": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 100    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }'
                only_create:
                    type: boolean
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        CreateOrUpdateCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: a detailed response message.
                status:
                    type: string
                    description: an enum with value set as "created" or "updated".
        DatabaseInfo:
            type: object
            properties:
                name:
                    type: string
        DatabaseOptions:
            type: object
            properties: {}
            description: Database requests modifying options
        DeleteRequest:
            type: object
            properties:
                filter:
                    type: object
                    description: 'Delete documents which matching specified filter. The filter should proper JSON object. Filter syntax described here: {TBD}'
                options:
                    $ref: '#/components/schemas/DeleteRequestOptions'
        DeleteRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
        DeleteResponse:
            type: object
            properties:
                timestamp:
                    type: string
                    description: Returns the timestamp when the documents are deleted.
        DropCollectionRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        DropCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: a detailed response message.
                status:
                    type: string
                    description: an enum with value set as "dropped"
        DropDatabaseRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/DatabaseOptions'
        DropDatabaseResponse:
            type: object
            properties:
                message:
                    type: string
                    description: a detailed response message.
                status:
                    type: string
                    description: an enum with value set as "dropped"
        InsertRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to insert. Should be proper JSON object
                options:
                    $ref: '#/components/schemas/InsertRequestOptions'
        InsertRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Insert request options
        InsertResponse:
            type: object
            properties:
                timestamp:
                    type: string
                    description: Returns the commit timestamp of the documents.
        ListCollectionsRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        ListCollectionsResponse:
            type: object
            properties:
                collections:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionInfo'
                    description: List of the collections in the database
        ListDatabasesResponse:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        $ref: '#/components/schemas/DatabaseInfo'
                    description: List of the databases.
        ReadRequest:
            type: object
            properties:
                filter:
                    type: object
                    description: 'Returns documents matching this filter. The filter should proper JSON object Filter syntax described here: {TBD}'
                fields:
                    type: object
                    description: Limit fields returned by the read by this subset of the fields The fields should proper JSON object
                options:
                    $ref: '#/components/schemas/ReadRequestOptions'
        ReadRequestOptions:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
                limit:
                    type: integer
                    description: Limit the number of documents returned by the read operation
                    format: int64
                skip:
                    type: integer
                    description: Number of documents to skip before starting to return resulting documents
                    format: int64
                offset:
                    type: string
                    description: Start returning document start from this primary key
                    format: byte
            description: ReadRequestOptions contain read behavior modifying options
        ReadResponse:
            type: object
            properties:
                data:
                    type: object
                    description: data has the user requested data
                resume_token:
                    type: string
                    description: resume_token is internal key, used for pagination.
                    format: byte
        ReplaceRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to be replaced. Should be proper JSON object.
                options:
                    $ref: '#/components/schemas/ReplaceRequestOptions'
        ReplaceRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
        ReplaceResponse:
            type: object
            properties:
                timestamp:
                    type: string
                    description: Returns the commit timestamp of the replaced documents.
        RollbackTransactionRequest:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Rollback transaction with the given ID
        RollbackTransactionResponse:
            type: object
            properties: {}
        TransactionCtx:
            type: object
            properties:
                id:
                    type: string
                origin:
                    type: string
            description: Contains ID which uniquely identifies transaction.This context is returned by StartTransaction request andshould be passed in the options of document modificationrequests in order to run them in the context of the sametransaction
        TransactionOptions:
            type: object
            properties: {}
            description: Modify start transaction behavior
        UpdateRequest:
            type: object
            properties:
                fields:
                    type: object
                    description: Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
                filter:
                    type: object
                    description: 'Update documents which matching specified filter. The filter should proper JSON object Filter syntax described here: {TBD}'
                options:
                    $ref: '#/components/schemas/UpdateRequestOptions'
        UpdateRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
        UpdateResponse:
            type: object
            properties:
                timestamp:
                    type: string
                    description: Returns the timestamp when the documents are updated.
                modified_count:
                    type: integer
                    description: Returns the number of documents modified.
                    format: int32
        WriteOptions:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: WriteOptions contain write behavior modifying options
tags:
    - name: TigrisDB
