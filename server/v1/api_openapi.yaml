# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/apps/protoc-gen-openapi
openapi: 3.0.3
info:
    title: TigrisDB API
    version: 0.0.1
paths:
    /api/v1/databases/list:
        post:
            tags:
                - TigrisDB
            description: List returns all the databases.
            operationId: TigrisDB_ListDatabases
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDatabasesResponse'
    /api/v1/databases/{db}/collections/list:
        post:
            tags:
                - TigrisDB
            description: List all collections in the database passed in the request.
            operationId: TigrisDB_ListCollections
            parameters:
                - name: db
                  in: path
                  description: List collection in this database.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListCollectionsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListCollectionsResponse'
    /api/v1/databases/{db}/collections/{collection}/createOrUpdate:
        post:
            tags:
                - TigrisDB
            description: |-
                Creates a new collection or atomically upgrades the collection to the new schema changes in the database
                 passed in the request.
            operationId: TigrisDB_CreateOrUpdateCollection
            parameters:
                - name: db
                  in: path
                  description: Database name where to create collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to create.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateOrUpdateCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateOrUpdateCollectionResponse'
    /api/v1/databases/{db}/collections/{collection}/describe:
        post:
            tags:
                - TigrisDB
            description: Describe collection describes the information related to collection.
            operationId: TigrisDB_DescribeCollection
            parameters:
                - name: db
                  in: path
                  description: Name of the database.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Name of the collection.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DescribeCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeCollectionResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/delete:
        delete:
            tags:
                - TigrisDB
            description: Delete a range of documents in the collection using the condition provided in the filter.
            operationId: TigrisDB_Delete
            parameters:
                - name: db
                  in: path
                  description: Database name where to insert documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/insert:
        post:
            tags:
                - TigrisDB
            description: |-
                Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
                 in the request already exists. Insert provides idempotency by returning an error if the document
                 already exists. To replace documents, use REPLACE API instead of INSERT.
            operationId: TigrisDB_Insert
            parameters:
                - name: db
                  in: path
                  description: Database name where to insert documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/read:
        post:
            tags:
                - TigrisDB
            description: Reads range of documents from the collection using the condition in the filter.
            operationId: TigrisDB_Read
            parameters:
                - name: db
                  in: path
                  description: Database name to read documents from.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to read documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReadRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/replace:
        put:
            tags:
                - TigrisDB
            description: Inserts the documents or replaces the existing documents in the collections.
            operationId: TigrisDB_Replace
            parameters:
                - name: db
                  in: path
                  description: Database name where to replace documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to replace documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReplaceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReplaceResponse'
    /api/v1/databases/{db}/collections/{collection}/documents/update:
        put:
            tags:
                - TigrisDB
            description: Update a range of documents in the collection using the condition provided in the filter.
            operationId: TigrisDB_Update
            parameters:
                - name: db
                  in: path
                  description: Database name where to update documents
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to update documents
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateResponse'
    /api/v1/databases/{db}/collections/{collection}/drop:
        delete:
            tags:
                - TigrisDB
            description: Drop the collection and all its documents in the database passed in the request.
            operationId: TigrisDB_DropCollection
            parameters:
                - name: db
                  in: path
                  description: Database name of the collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to drop.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DropCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DropCollectionResponse'
    /api/v1/databases/{db}/create:
        post:
            tags:
                - TigrisDB
            description: Creates a new database and returns a AlreadyExists error if the database already exists.
            operationId: TigrisDB_CreateDatabase
            parameters:
                - name: db
                  in: path
                  description: Create database with this name.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateDatabaseResponse'
    /api/v1/databases/{db}/describe:
        post:
            tags:
                - TigrisDB
            description: |-
                Describe database describes the information related to database along
                 with all the collections inside database.
            operationId: TigrisDB_DescribeDatabase
            parameters:
                - name: db
                  in: path
                  description: Name of the database.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DescribeDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeDatabaseResponse'
    /api/v1/databases/{db}/drop:
        delete:
            tags:
                - TigrisDB
            description: Drop database deletes all the collections in the database along with all it documents.
            operationId: TigrisDB_DropDatabase
            parameters:
                - name: db
                  in: path
                  description: 'Drop database with this name. **Note**: Deletes all the collections in the database. Use with caution.'
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DropDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DropDatabaseResponse'
    /api/v1/databases/{db}/transactions/begin:
        post:
            tags:
                - TigrisDB
            description: |-
                Starts a new transaction and returns a transactional object. All reads/writes performed
                 within a transaction will run with serializable isolation.
            operationId: TigrisDB_BeginTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeginTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeginTransactionResponse'
    /api/v1/databases/{db}/transactions/commit:
        post:
            tags:
                - TigrisDB
            description: |-
                Atomically commit all the changes performed in the context of the transaction. Commit provides all
                 or nothing semantics by ensuring no partial updates are in the database due to a transaction failure.
            operationId: TigrisDB_CommitTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CommitTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CommitTransactionResponse'
    /api/v1/databases/{db}/transactions/rollback:
        post:
            tags:
                - TigrisDB
            description: |-
                Rollback transaction discards all the changes
                 performed in the transaction
            operationId: TigrisDB_RollbackTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RollbackTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RollbackTransactionResponse'
components:
    schemas:
        BeginTransactionRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/TransactionOptions'
            description: Start new transaction in database specified by "db".
        BeginTransactionResponse:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Start transaction returns transaction context  which uniquely identifies the transaction
        CollectionDescription:
            type: object
            properties:
                collection:
                    type: string
                    description: Name of the collection.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
                schema_info:
                    $ref: '#/components/schemas/SchemaInfo'
        CollectionInfo:
            type: object
            properties:
                collection:
                    type: string
                    description: Collection name.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
        CollectionMetadata:
            type: object
            properties: {}
        CollectionOptions:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Collection requests modifying options.
        CommitTransactionRequest:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Commit transaction with the given ID
        CommitTransactionResponse:
            type: object
            properties: {}
        CreateDatabaseRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/DatabaseOptions'
        CreateDatabaseResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created".
        CreateOrUpdateCollectionRequest:
            type: object
            properties:
                schema:
                    type: object
                    description: 'Schema of the documents in this collection. The schema specifications are same as JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>. <p></p>The following is an schema example: `{  "name": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 100    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`'
                only_create:
                    type: boolean
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        CreateOrUpdateCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created" or "updated"
        DatabaseDescription:
            type: object
            properties:
                db:
                    type: string
                    description: Name of the database.
                metadata:
                    $ref: '#/components/schemas/DatabaseMetadata'
                collections_description:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionDescription'
                    description: A detailed description about all the collections. The description returns collection metadata and the schema.
        DatabaseInfo:
            type: object
            properties:
                db:
                    type: string
                    description: Database name.
                metadata:
                    $ref: '#/components/schemas/DatabaseMetadata'
        DatabaseMetadata:
            type: object
            properties: {}
        DatabaseOptions:
            type: object
            properties: {}
            description: Database requests modifying options.
        DeleteRequest:
            type: object
            properties:
                filter:
                    type: object
                    description: 'Delete documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To delete a user document where the id has a value 1: ```{"id": 1 }``` <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                options:
                    $ref: '#/components/schemas/DeleteRequestOptions'
        DeleteRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Additional options for deleted requests.
        DeleteResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: an enum with value set as "deleted"
        DescribeCollectionRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Name of the database.
                collection:
                    type: string
                    description: Name of the collection.
        DescribeCollectionResponse:
            type: object
            properties:
                description:
                    $ref: '#/components/schemas/CollectionDescription'
        DescribeDatabaseRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Name of the database.
        DescribeDatabaseResponse:
            type: object
            properties:
                description:
                    $ref: '#/components/schemas/DatabaseDescription'
        DropCollectionRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        DropCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "dropped".
        DropDatabaseRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/DatabaseOptions'
        DropDatabaseResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "dropped".
        InsertRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to insert. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/InsertRequestOptions'
        InsertRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: additional options for insert requests.
        InsertResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: An enum with value set as "inserted"
        ListCollectionsRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        ListCollectionsResponse:
            type: object
            properties:
                db:
                    type: string
                    description: Name of the database.
                collections:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionInfo'
                    description: List of the collections info in the database.
        ListDatabasesResponse:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        $ref: '#/components/schemas/DatabaseInfo'
                    description: List of the databases.
        ReadRequest:
            type: object
            properties:
                filter:
                    type: object
                    description: 'Returns documents matching this filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To read a user document where the id has a value 1: ```{"id": 1 }``` <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                fields:
                    type: object
                    description: To read specific fields from a document. Default is all.
                options:
                    $ref: '#/components/schemas/ReadRequestOptions'
        ReadRequestOptions:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
                limit:
                    type: integer
                    description: Limit the number of documents returned by the read operation.
                    format: int64
                skip:
                    type: integer
                    description: Number of documents to skip before starting to return resulting documents.
                    format: int64
                offset:
                    type: string
                    description: A cursor for use in pagination. The next streams will return documents after this offset.
                    format: byte
            description: Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
        ReadResponse:
            type: object
            properties:
                data:
                    type: object
                    description: Object containing the collection document.
                resume_token:
                    type: string
                    description: An internal key, used for pagination.
                    format: byte
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
        ReplaceRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to be replaced. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/ReplaceRequestOptions'
        ReplaceRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Additional options for replace requests.
        ReplaceResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: an enum with value set as "replaced"
        ResponseMetadata:
            type: object
            properties:
                created_at:
                    type: string
                    description: Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                updated_at:
                    type: string
                    description: Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
                    format: date-time
            description: Has metadata related to the documents stored.
        RollbackTransactionRequest:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Rollback transaction with the given ID
        RollbackTransactionResponse:
            type: object
            properties: {}
        SchemaInfo:
            type: object
            properties:
                schema:
                    type: string
                    description: The schema of the collection.
                    format: byte
        TransactionCtx:
            type: object
            properties:
                id:
                    type: string
                    description: Unique for a single transactional request.
                origin:
                    type: string
                    description: Serves as an internal identifier.
            description: Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.
        TransactionOptions:
            type: object
            properties: {}
            description: Options that can be used to modify the transaction semantics.
        UpdateRequest:
            type: object
            properties:
                fields:
                    type: object
                    description: Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
                filter:
                    type: object
                    description: 'Update documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To update a user document where the id has a value 1: ```{"id": 1 }``` <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                options:
                    $ref: '#/components/schemas/UpdateRequestOptions'
        UpdateRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Additional options for update requests.
        UpdateResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                modified_count:
                    type: integer
                    description: Returns the number of documents modified.
                    format: int32
                status:
                    type: string
                    description: an enum with value set as "updated".
        WriteOptions:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Additional options to modify write requests.
tags:
    - name: TigrisDB
